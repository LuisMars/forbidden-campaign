@page "/warband/{WarbandId}"
@using ForbiddenPsalmBuilder.Core.Services.State
@using ForbiddenPsalmBuilder.Core.Models.Warband
@using ForbiddenPsalmBuilder.Core.Models.Character
@using ForbiddenPsalmBuilder.Core.DTOs
@using ForbiddenPsalmBuilder.Core.Validation
@using ForbiddenPsalmBuilder.Blazor.Components
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@inject IGameStateService StateService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
<PageTitle>@(warband?.Name ?? "Warband") - Forbidden Psalm Builder</PageTitle>
<main>
    @if (warband == null)
    {
        <section>
            <div>
                @if (isLoading)
                {
                    <section>
                        <div role="status">
                            <span>Loading...</span>
                        </div>
                        <p>Loading warband...</p>
                    </section>
                }
                else
                {
                    <section>
                        <i class="fas fa-exclamation-triangle"></i>
                        <h3>Warband Not Found</h3>
                        <p>The warband you're looking for doesn't exist or has been deleted.</p>
                        <button @onclick="GoHome">
                            <i class="fas fa-home"></i>
                            Go Home
                        </button>
                    </section>
                }
            </div>
        </section>
    }
    else
    {
        <!-- Web-only Header with Actions -->
        <section class="no-print">
            <div class="horizontal space">
                <button @onclick="GoHome">
                    <i class="fas fa-home"></i>
                    Home
                </button>
                <div class="horizontal">
                    <button @onclick="() => showEditModal = true">
                        <i class="fas fa-edit"></i>
                        Edit
                    </button>
                    <button @onclick="() => showStashModal = true">
                        <i class="fas fa-box-open"></i>
                        Stash
                    </button>
                    <button @onclick="AddCharacter" disabled="@(!warband.CanAddMember)">
                        <i class="ra ra-person"></i>
                        Add Member
                    </button>
                    <button @onclick="PrintWarband">
                        <i class="fas fa-print"></i>
                        Print
                    </button>
                </div>
            </div>
        </section>
        <!-- Warband Title and Stats -->
        <section>
            <div class="horizontal space">
                <h1 class="waband-name">
                @warband.Name
                </h1>
                <StatsDisplay Stats="@GetWarbandStats()" />
            </div>
        </section>
        <!-- Warband Members -->
        <section>
            @if (warband.Members.Any())
            {
                <div class="character-grid">
                    @foreach (var character in warband.Members)
                    {
                        <CharacterCard
                            Character="@character"
                            SpecialClassIcon="@GetSpecialClassIcon(character.SpecialClassId)"
                            OnEdit="@(() => EditCharacter(character.Id))"
                            OnDelete="@(() => RemoveCharacter(character.Id))"
                            OnEquipmentRemove="@(equipment => RemoveEquipmentFromCharacter(character.Id, equipment))"
                            OnEquipmentSell="@(equipment => SellEquipmentFromCharacter(character.Id, equipment))" />
                    }
                </div>
            }
            else
            {
                <section>
                    <i class="ra ra-muscle-up"></i>
                    <p>No members in this warband yet.</p>
                    <p>Add your first character to get started!</p>
                    <button @onclick="AddCharacter">
                        <i class="ra ra-person"></i>
                        Add First Member
                    </button>
                </section>
            }
        </section>

        <!-- Warband Stash -->
        @if (warband.Stash.Any())
        {
            <section>
                <div class="horizontal space">
                    <h2>Warband Stash (@warband.Stash.Count items)</h2>
                    <button @onclick="() => showStashModal = true" class="no-print">
                        <i class="fas fa-exchange-alt"></i>
                        Manage
                    </button>
                </div>
                <div class="stash-grid">
                    @foreach (var equipment in warband.Stash)
                    {
                        <EquipmentCard
                            Equipment="equipment"
                            CompactMode="false"
                            ShowActions="false"
                            ShowPrice="false" />
                    }
                </div>
            </section>
        }
    }
    <!-- Edit Warband Info Modal -->
    <Modal
        IsVisible="@(showEditModal && warband != null)"
        Title="Edit Warband Info"
        OnClose="CancelEdit">
        <EditForm Model="editWarbandDto" OnValidSubmit="SaveWarband">
            <DataAnnotationsValidator />
            <div>
                <label for="warbandName">Warband Name</label>
                <div class="horizontal gap-small">
                    <InputText
                        id="warbandName"
                        @bind-Value="editWarbandDto.Name"
                        placeholder="Enter warband name..." />
                    <button
                        type="button"
                        @onclick="GenerateNewName"
                        title="Generate new random name">
                        <i class="fas fa-dice"></i>
                    </button>
                </div>
                <ValidationMessage For="@(() => editWarbandDto.Name)" />
            </div>
            <div>
                <div>
                    <div>
                        <label for="gold">
                            @GetCurrencyName() (@GetCurrencySymbol() )
                        </label>
                        <InputNumber id="gold" @bind-Value="editWarbandDto.Gold" />
                        <ValidationMessage For="@(() => editWarbandDto.Gold)" />
                    </div>
                </div>
                <div>
                    <div>
                        <label for="experience">Experience Points</label>
                        <InputNumber id="experience" @bind-Value="editWarbandDto.Experience" />
                        <ValidationMessage For="@(() => editWarbandDto.Experience)" />
                    </div>
                </div>
            </div>
            @if (validationErrors.Any())
            {
                <aside>
                    <strong>Validation Errors:</strong>
                    <ul>
                        @foreach (var error in validationErrors)
                        {
                            <li>
                            @error
                            </li>
                        }
                    </ul>
                </aside>
            }
            <footer>
                <button type="button" @onclick="CancelEdit">
                    <i class="fas fa-times"></i>
                    Cancel
                </button>
                <button type="submit" disabled="@(!IsValidForm())">
                    <i class="fas fa-save"></i>
                    Save Changes
                </button>
            </footer>
        </EditForm>
    </Modal>

    <!-- Stash Modal -->
    <StashModal
        Warband="@warband"
        IsVisible="@showStashModal"
        OnClose="CloseStashModal"
        OnEquipmentChanged="LoadWarband" />
</main>

@code {
    [Parameter] public string WarbandId { get; set; } = string.Empty;

    private Warband? warband;
    private EditWarbandDto editWarbandDto = new();
    private List<string> validationErrors = new();
    private bool isLoading = true;
    private bool showEditModal = false;
    private bool showStashModal = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadWarband();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(WarbandId))
        {
            await LoadWarband();
        }
    }

    private async Task LoadWarband()
    {
        isLoading = true;
        validationErrors.Clear();

        try
        {
            warband = await StateService.GetWarbandAsync(WarbandId);

            if (warband != null)
            {
                editWarbandDto = new EditWarbandDto
                {
                    Id = warband.Id,
                    Name = warband.Name,
                    Gold = warband.Gold,
                    Experience = warband.Experience,
                    GameVariant = warband.GameVariant
                };
            }
        }
        catch (Exception ex)
        {
            await StateService.SetErrorAsync($"Failed to load warband: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveWarband()
    {
        if (warband == null) return;

        validationErrors.Clear();

        try
        {
            // Update the warband with new values
            warband.Name = editWarbandDto.Name.Trim();
            warband.Gold = editWarbandDto.Gold;
            warband.Experience = editWarbandDto.Experience;

            // Save the updated warband
            await StateService.UpdateWarbandAsync(warband);

            // Close modal and refresh
            showEditModal = false;
            await LoadWarband();
        }
        catch (Exception ex)
        {
            await StateService.SetErrorAsync($"Failed to save warband: {ex.Message}");
        }
    }

    private void CancelEdit()
    {
        showEditModal = false;
        validationErrors.Clear();

        // Reset the form to original values
        if (warband != null)
        {
            editWarbandDto = new EditWarbandDto
            {
                Id = warband.Id,
                Name = warband.Name,
                Gold = warband.Gold,
                Experience = warband.Experience,
                GameVariant = warband.GameVariant
            };
        }
    }

    private async Task GenerateNewName()
    {
        editWarbandDto.Name = await StateService.GenerateWarbandNameAsync();
        StateHasChanged();
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }

    private void AddCharacter()
    {
        Navigation.NavigateTo($"/warband/{WarbandId}/character/new");
    }

    private void EditCharacter(string characterId)
    {
        Navigation.NavigateTo($"/warband/{WarbandId}/character/{characterId}");
    }

    private string? GetSpecialClassIcon(string? specialClassId)
    {
        if (string.IsNullOrEmpty(specialClassId) || warband == null) return null;

        var specialClass = StateService.GetSpecialClassByIdAsync(specialClassId, warband.GameVariant).GetAwaiter().GetResult();
        return specialClass?.IconClass;
    }

    private async Task RemoveCharacter(string characterId)
    {
        if (warband == null) return;

        try
        {
            await StateService.RemoveCharacterFromWarbandAsync(warband.Id, characterId);
            await LoadWarband(); // Refresh the page
        }
        catch (Exception ex)
        {
            await StateService.SetErrorAsync($"Failed to remove character: {ex.Message}");
        }
    }

    private async Task RemoveEquipmentFromCharacter(string characterId, Equipment equipment)
    {
        if (warband == null) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Move {equipment.Name} to warband stash?" });
        if (!confirmed) return;

        try
        {
            var character = warband.Members.FirstOrDefault(c => c.Id == characterId);
            if (character == null) return;

            // Remove equipment from character
            character.Equipment.Remove(equipment);

            // Add equipment to warband stash
            warband.Stash.Add(equipment);

            // Update the warband
            await StateService.UpdateWarbandAsync(warband);
            await LoadWarband(); // Refresh the page
        }
        catch (Exception ex)
        {
            await StateService.SetErrorAsync($"Failed to remove equipment: {ex.Message}");
        }
    }

    private async Task SellEquipmentFromCharacter(string characterId, Equipment equipment)
    {
        if (warband == null) return;

        var sellPrice = equipment.Cost / 2;
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Sell {equipment.Name} for {sellPrice}{GetCurrencySymbol()}?" });
        if (!confirmed) return;

        try
        {
            var character = warband.Members.FirstOrDefault(c => c.Id == characterId);
            if (character == null) return;

            // Remove equipment from character
            character.Equipment.Remove(equipment);

            // Add gold to warband
            warband.Gold += sellPrice;

            // Update the warband
            await StateService.UpdateWarbandAsync(warband);
            await LoadWarband(); // Refresh the page
        }
        catch (Exception ex)
        {
            await StateService.SetErrorAsync($"Failed to sell equipment: {ex.Message}");
        }
    }

    private bool IsValidForm()
    {
        if (editWarbandDto == null) return false;
        if (string.IsNullOrWhiteSpace(editWarbandDto.Name)) return false;
        if (editWarbandDto.Gold
<
0 || editWarbandDto.Gold > 9999) return false;
        if (editWarbandDto.Experience
<
0 || editWarbandDto.Experience > 999) return false;
        return true;
    }

    private string GetGameVariantDisplayName(string variant)
    {
        return variant switch
        {
            "28-psalms" => "28 Psalms",
            "end-times" => "Forbidden Psalm: End Times",
            "last-war" => "The Last War",
            _ => variant
        };
    }

    private string GetCurrencyName()
    {
        return warband?.GameVariant switch
        {
            "28-psalms" => "Credits",
            "end-times" => "Gold",
            "last-war" => "Resources",
            _ => "Gold"
        };
    }

    private string GetCurrencySymbol()
    {
        return warband?.GameVariant switch
        {
            "28-psalms" => "C",
            "end-times" => "G",
            "last-war" => "R",
            _ => "G"
        };
    }

    private List
<
ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem> GetWarbandStats()
    {
        if (warband == null) return new List
<
ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem>();

        return new List
<
ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem>
        {
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = $"{warband.Gold}{GetCurrencySymbol()}",
                Label = GetCurrencyName()
            },
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = $"{warband.Experience}",
                Label = "Experience"
            }
        };
    }

    private List
<
ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem> GetBreadcrumbItems()
    {
        return new List
<
ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem>
        {
            new ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem
            {
                Text = "Home",
                Href = "/"
            },
            new ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem
            {
                Text = warband?.Name ?? "Warband",
                Href = null
            }
        };
    }

    private async Task PrintWarband()
    {
        await JSRuntime.InvokeVoidAsync("window.print");
    }

    private void CloseStashModal()
    {
        showStashModal = false;
    }
}
