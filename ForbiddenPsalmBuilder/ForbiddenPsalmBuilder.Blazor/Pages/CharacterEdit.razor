@page "/warband/{WarbandId}/character/{CharacterId}"
@page "/warband/{WarbandId}/character/new"
@using ForbiddenPsalmBuilder.Core.Services.State
@using ForbiddenPsalmBuilder.Core.Models.Warband
@using ForbiddenPsalmBuilder.Core.Models.Character
@using ForbiddenPsalmBuilder.Core.DTOs
@using ForbiddenPsalmBuilder.Core.Services
@using ForbiddenPsalmBuilder.Core.Models.Selection
@using Microsoft.AspNetCore.Components.Forms
@inject IGameStateService StateService
@inject EquipmentService EquipmentService
@inject TraderService TraderService
@inject NavigationManager Navigation
@inject ILogger<CharacterEdit> Logger
@inject IJSRuntime JSRuntime
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop

<PageTitle>
    @(IsNewCharacter ? "New Character" : $"Edit {character?.Name}") - Forbidden Psalm Builder
</PageTitle>

<PageHeader
    Title="@(IsNewCharacter ? "New Character" : $"Edit {character?.Name}")"
    Subtitle="@(warband?.Name ?? "Unknown Warband")"
    BreadcrumbItems="@GetBreadcrumbItems()">
    <Actions>
        <button type="button" @onclick="GoBack">
            <i class="fas fa-arrow-left"></i>
            Back to Warband
        </button>
    </Actions>
</PageHeader>

<main>
    @if (isLoading)
    {
        <section>
            <div role="status">
                <span>Loading...</span>
            </div>
            <p>@(IsNewCharacter ? "Preparing character creation..." : "Loading character...")</p>
        </section>
    }
    else if (warband == null)
    {
        <section>
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Warband Not Found</h3>
            <p>The warband you're looking for doesn't exist or has been deleted.</p>
            <button @onclick="GoHome">
                <i class="fas fa-home"></i>
                Go Home
            </button>
        </section>
    }
    else
    {
        <EditForm Model="editCharacterDto" OnInvalidSubmit="HandleInvalidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="edit-sections-grid">
                <!-- Character Info -->
                <section class="edit-section">
                    <h2>Character Information</h2>
                    <div class="character-info-grid">
                        <div class="form-group-compact">
                            <label for="characterName">Character Name</label>
                            <div class="horizontal gap-small">
                                <InputText
                                    id="characterName"
                                    @bind-Value="editCharacterDto.Name"
                                    @bind-Value:after="AutoSave"
                                    placeholder="Enter character name..." />
                                <button
                                    type="button"
                                    @onclick="GenerateNewCharacterName"
                                    title="Generate new random name">
                                    <i class="fas fa-dice"></i>
                                </button>
                            </div>
                            <ValidationMessage For="@(() => editCharacterDto.Name)" />
                        </div>
                    </div>
                </section>

                <!-- Special Classes -->
                <section class="edit-section">
                    <InfoSelector
                        Items="@availableSpecialClasses"
                        @bind-SelectedId="editCharacterDto.SpecialClassId"
                        @bind-SelectedId:after="AutoSave"
                        Label="Special Class"
                        ModalLabel="Select Special Class"
                        Category="special-class"
                        AllowNone="true"
                        Searchable="true"
                        ShowCost="true"
                        ShowIcons="true"
                        CurrencySymbol="@GetCurrencySymbol()" />
                </section>

                <!-- Character Stats -->
                <section class="edit-section edit-section-wide">
                    <div class="stats-header">
                        <h2>Character Stats</h2>
                        <button type="button" class="button-secondary" @onclick="OpenStatArrayModal">
                            <i class="fas fa-dice-d20"></i> Select Distribution
                        </button>
                    </div>

                    <StatsDisplay Stats="@GetMainStats()" />
                    <StatsDisplay Stats="@GetCalculatedStats()" />
                </section>

                <!-- Equipment -->
                <section class="edit-section">
                    <div class="section-header-with-bar">
                        <h2>Equipment</h2>
                        <SlotUsageBar
                            UsedSlots="@GetUsedEquipmentSlots()"
                            TotalSlots="@GetTotalEquipmentSlots()" />
                    </div>

                    @if (character != null && character.Equipment.Any())
                    {
                        <div class="equipment-list">
                            @foreach (var equipment in character.Equipment)
                            {
                                <EquipmentCard
                                    Equipment="equipment"
                                    ShowActions="true"
                                    OnRemove="() => RemoveEquipment(equipment.Id)"
                                    OnSell="@(e => SellEquipment(e))" />
                            }
                        </div>
                    }
                    else
                    {
                        <p class="no-equipment-message">No equipment equipped</p>
                    }

                    <div class="equipment-actions horizontal gap-small">
                        <button type="button" @onclick="OpenAddFromStashModal" disabled="@(!HasStashEquipment())">
                            <i class="fas fa-box-open"></i>
                            Add from Stash
                        </button>
                        <button type="button" @onclick="OpenAddEquipmentModal">
                            <i class="fas fa-gift"></i>
                            Add New Equipment
                        </button>
                    </div>
                </section>
            </div>

            @if (validationErrors.Any())
            {
                <aside>
                    <strong>Validation Errors:</strong>
                    <ul>
                        @foreach (var error in validationErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </aside>
            }

        </EditForm>
    }

    <!-- Stat Array Selection Modal -->
    @if (showStatArrayModal)
    {
        <Modal IsVisible="true" OnClose="CloseStatArrayModal">
            <StatArraySelector
                StatArrays="@availableStatArrays"
                InitialAgility="@editCharacterDto.Agility"
                InitialPresence="@editCharacterDto.Presence"
                InitialStrength="@editCharacterDto.Strength"
                InitialToughness="@editCharacterDto.Toughness"
                OnStatsChanged="OnStatArrayStatsChanged"
                OnArraySelectionChanged="OnStatArraySelectionChanged"
                OnClose="CloseStatArrayModal" />
        </Modal>
    }

    <!-- Add Equipment from Stash Modal -->
    @if (showAddFromStashModal && character != null)
    {
        <Modal IsVisible="true" OnClose="CloseAddFromStashModal">
            <div class="modal-header">
                <h2>Add Equipment from Stash</h2>
            </div>
            <EquipmentSelector
                Equipment="@availableStashEquipment"
                ShowTabs="true"
                ShowSearch="true"
                ShowActions="true"
                OnEquipmentSelected="AddEquipmentFromStash" />
        </Modal>
    }

    <!-- Add New Equipment Modal -->
    @if (showAddEquipmentModal && warband != null)
    {
        <Modal IsVisible="true" OnClose="CloseAddEquipmentModal">
            <div class="modal-header">
                <div class="modal-header-content">
                    <h2>Add Equipment to Character</h2>
                </div>
                <button type="button" class="modal-close-button" @onclick="CloseAddEquipmentModal">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <TraderSelector
                Traders="@availableTraders"
                SelectedTraderId="@selectedTraderId"
                SelectedTraderIdChanged="@OnTraderChanged"
                Label="Select Trader"
                AllowNone="true"
                ShowPricingInfo="true" />

            @if (selectedTrader?.HasLimitedInventory == true)
            {
                <div class="merchant-roll-section">
                    <button type="button" @onclick="RollMerchantInventory" class="button">
                        <i class="fas fa-dice"></i> Roll Merchant Inventory
                    </button>
                    @if (merchantInventoryIds.Any())
                    {
                        <span class="merchant-inventory-count">
                            (@merchantInventoryIds.Count items available)
                        </span>
                        <button type="button" @onclick="ClearMerchantInventory" class="button-small">
                            <i class="fas fa-times"></i> Clear
                        </button>
                    }
                </div>
            }

            <EquipmentSelector
                Weapons="@GetFilteredWeapons()"
                Armors="@GetFilteredArmors()"
                Items="@GetFilteredItems()"
                ShowTabs="true"
                ShowSearch="true"
                ShowPrice="@(!string.IsNullOrEmpty(selectedTraderId))"
                ShowActions="true"
                UseCompactMode="true"
                CurrencySymbol="G"
                WarbandMoney="@warband?.Gold"
                PriceCalculator="@CalculateBuyPrice"
                DisabledEquipmentIds="@GetUnaffordableEquipmentIds()"
                DisableBuyButton="@(string.IsNullOrEmpty(selectedTraderId) || (selectedTrader?.HasLimitedInventory == true && !merchantInventoryIds.Any()))"
                OnBuy="@_handleBuyEquipment"
                OnAssign="@AddNewEquipment" />
        </Modal>
    }
</main>

@code {
    [Parameter] public string WarbandId { get; set; } = string.Empty;
    [Parameter] public string? CharacterId { get; set; }

    private Warband? warband;
    private Character? character;
    private EditCharacterDto editCharacterDto = new();
    private List<string> validationErrors = new();
    private bool isLoading = true;
    private List<ISelectableItem> availableSpecialClasses = new();
    private List<ForbiddenPsalmBuilder.Core.Models.Character.StatArray> availableStatArrays = new();
    private bool showStatArrayModal = false;

    // Equipment management
    private bool showAddFromStashModal = false;
    private bool showAddEquipmentModal = false;
    private List<Equipment> availableStashEquipment = new();
    private List<Weapon> allWeapons = new();
    private List<Armor> allArmors = new();
    private List<Item> allItems = new();
    private List<Trader> availableTraders = new();
    private string? selectedTraderId;
    private Trader? selectedTrader;
    private EventCallback<Equipment> _handleBuyEquipment;
    private List<string> merchantInventoryIds = new();

    private bool IsNewCharacter => string.IsNullOrEmpty(CharacterId) || CharacterId == "new";

    private void OpenStatArrayModal()
    {
        showStatArrayModal = true;
    }

    private void CloseStatArrayModal()
    {
        showStatArrayModal = false;
    }

    protected override async Task OnInitializedAsync()
    {
        _handleBuyEquipment = EventCallback.Factory.Create<Equipment>(this, BuyEquipment);
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(WarbandId))
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        validationErrors.Clear();

        try
        {
            warband = await StateService.GetWarbandAsync(WarbandId);

            if (warband == null)
            {
                return;
            }

            // Load available special classes for this game variant
            var specialClasses = await StateService.GetSpecialClassesAsync(warband.GameVariant);
            availableSpecialClasses = specialClasses.Cast<ISelectableItem>().ToList();

            // Load available stat arrays
            availableStatArrays = await StateService.GetStatArraysAsync();

            // Load all equipment for "Add New Equipment" modal
            allWeapons = await EquipmentService.GetWeaponsAsync(warband.GameVariant);
            allArmors = await EquipmentService.GetArmorAsync(warband.GameVariant);
            allItems = await EquipmentService.GetItemsAsync(warband.GameVariant);
            availableTraders = await TraderService.GetTradersAsync(warband.GameVariant);

            if (IsNewCharacter)
            {
                editCharacterDto = new EditCharacterDto
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = await StateService.GenerateCharacterNameAsync(warband.GameVariant),
                    Agility = 0,
                    Presence = 0,
                    Strength = 0,
                    Toughness = 0
                };
            }
            else
            {
                character = warband.Members.FirstOrDefault(m => m.Id == CharacterId);
                if (character != null)
                {
                    editCharacterDto = new EditCharacterDto
                    {
                        Id = character.Id,
                        Name = character.Name,
                        Agility = character.Stats.Agility,
                        Presence = character.Stats.Presence,
                        Strength = character.Stats.Strength,
                        Toughness = character.Stats.Toughness,
                        SpecialClassId = character.SpecialClassId
                    };
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to load data");
            await StateService.SetErrorAsync($"Failed to load data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private CancellationTokenSource? _autoSaveCts;

    private async Task AutoSave()
    {
        // Cancel any pending auto-save
        _autoSaveCts?.Cancel();
        _autoSaveCts = new CancellationTokenSource();

        try
        {
            // Debounce: wait 500ms before saving
            await Task.Delay(500, _autoSaveCts.Token);

            // Validate before saving
            if (!IsValidForm())
            {
                Logger.LogInformation("AutoSave skipped - form is not valid");
                return;
            }

            await SaveCharacter(navigateAfterSave: false);
        }
        catch (TaskCanceledException)
        {
            // Auto-save was cancelled, ignore
        }
    }

    private async Task SaveCharacter(bool navigateAfterSave = true)
    {
        Logger.LogInformation("SaveCharacter called - IsNewCharacter: {IsNew}, Stats: AGI={Agility}, PRE={Presence}, STR={Strength}, TGH={Toughness}",
            IsNewCharacter, editCharacterDto.Agility, editCharacterDto.Presence, editCharacterDto.Strength, editCharacterDto.Toughness);

        validationErrors.Clear();

        try
        {
            if (IsNewCharacter)
            {
                Logger.LogInformation("Creating new character...");
                var newCharacter = new Character(editCharacterDto.Name)
                {
                    Id = editCharacterDto.Id,
                    Stats = new Stats(
                        editCharacterDto.Agility,
                        editCharacterDto.Presence,
                        editCharacterDto.Strength,
                        editCharacterDto.Toughness
                    ),
                    SpecialClassId = editCharacterDto.SpecialClassId
                };
                newCharacter.CurrentHP = newCharacter.Stats.HP;

                await StateService.AddCharacterToWarbandAsync(WarbandId, newCharacter);
                Logger.LogInformation("Character created successfully");

                // Switch to edit mode after first save
                CharacterId = newCharacter.Id;
                character = newCharacter;
            }
            else if (character != null)
            {
                Logger.LogInformation("Updating existing character {CharacterId}...", CharacterId);
                character.Name = editCharacterDto.Name.Trim();
                character.Stats = new Stats(
                    editCharacterDto.Agility,
                    editCharacterDto.Presence,
                    editCharacterDto.Strength,
                    editCharacterDto.Toughness
                );
                character.SpecialClassId = editCharacterDto.SpecialClassId;

                // Update current HP if toughness changed
                if (character.CurrentHP > character.Stats.HP)
                {
                    character.CurrentHP = character.Stats.HP;
                }

                Logger.LogInformation("Calling UpdateCharacterAsync with stats: AGI={Agility}, PRE={Presence}, STR={Strength}, TGH={Toughness}",
                    character.Stats.Agility, character.Stats.Presence, character.Stats.Strength, character.Stats.Toughness);
                await StateService.UpdateCharacterAsync(WarbandId, CharacterId!, character);
                Logger.LogInformation("Character updated successfully");
            }

            if (navigateAfterSave)
            {
                Logger.LogInformation("Navigating to /warband/{WarbandId}", WarbandId);
                Navigation.NavigateTo($"/warband/{WarbandId}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error in SaveCharacter");
            await StateService.SetErrorAsync($"Failed to save character: {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo($"/warband/{WarbandId}");
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }

    private bool IsValidForm()
    {
        if (editCharacterDto == null) return false;
        if (string.IsNullOrWhiteSpace(editCharacterDto.Name)) return false;
        if (editCharacterDto.Agility < -3 || editCharacterDto.Agility > 3) return false;
        if (editCharacterDto.Presence < -3 || editCharacterDto.Presence > 3) return false;
        if (editCharacterDto.Strength < -3 || editCharacterDto.Strength > 3) return false;
        if (editCharacterDto.Toughness < -3 || editCharacterDto.Toughness > 3) return false;
        return true;
    }

    private List<ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem> GetBreadcrumbItems()
    {
        return new List<ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem>
        {
            new ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem
            {
                Text = "Home",
                Href = "/"
            },
            new ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem
            {
                Text = warband?.Name ?? "Warband",
                Href = $"/warband/{WarbandId}"
            },
            new ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem
            {
                Text = IsNewCharacter ? "New Character" : "Edit Character",
                Href = null
            }
        };
    }

    private List<ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem> GetMainStats()
    {
        return new List<ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem>
        {
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = editCharacterDto.Agility.ToString(),
                Label = "AGI"
            },
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = editCharacterDto.Presence.ToString(),
                Label = "PRE"
            },
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = editCharacterDto.Strength.ToString(),
                Label = "STR"
            },
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = editCharacterDto.Toughness.ToString(),
                Label = "TGH"
            }
        };
    }

    private List<ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem> GetCalculatedStats()
    {
        var totalArmor = character?.Equipment.Where(e => e.IsArmor).Sum(e => e.ArmorValue) ?? 0;

        return new List<ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem>
        {
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = editCharacterDto.HP.ToString(),
                Label = "HP"
            },
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = totalArmor.ToString(),
                Label = "AV"
            },
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = editCharacterDto.Movement.ToString(),
                Label = "MOV"
            }
        };
    }

    private async Task OnStatArrayStatsChanged((int Agility, int Presence, int Strength, int Toughness) stats)
    {
        Logger.LogInformation("OnStatArrayStatsChanged called: AGI={Agility}, PRE={Presence}, STR={Strength}, TGH={Toughness}",
            stats.Agility, stats.Presence, stats.Strength, stats.Toughness);
        editCharacterDto.Agility = stats.Agility;
        editCharacterDto.Presence = stats.Presence;
        editCharacterDto.Strength = stats.Strength;
        editCharacterDto.Toughness = stats.Toughness;
        Logger.LogInformation("Updated editCharacterDto: AGI={Agility}, PRE={Presence}, STR={Strength}, TGH={Toughness}",
            editCharacterDto.Agility, editCharacterDto.Presence, editCharacterDto.Strength, editCharacterDto.Toughness);
        await AutoSave();
        StateHasChanged();
    }

    private void OnStatArraySelectionChanged(string arrayId)
    {
        // This method can be simplified or removed if no longer needed
        StateHasChanged();
    }

    private async Task GenerateNewCharacterName()
    {
        if (warband == null) return;
        editCharacterDto.Name = await StateService.GenerateCharacterNameAsync(warband.GameVariant);
        await AutoSave();
        StateHasChanged();
    }

    private void HandleInvalidSubmit()
    {
        Logger.LogWarning("Form is INVALID - submission blocked by DataAnnotationsValidator");
    }

    private string GetCurrencySymbol()
    {
        if (warband == null) return "";

        var gameConfig = StateService.State.GameConfigs.GetValueOrDefault(warband.GameVariant);
        return gameConfig?.Currency?.Symbol ?? "";
    }

    // Equipment Management Methods
    private int GetUsedEquipmentSlots()
    {
        return character?.Equipment.Sum(e => e.Slots) ?? 0;
    }

    private int GetTotalEquipmentSlots()
    {
        return character?.Stats.EquipmentSlots ?? 10;
    }

    private bool HasStashEquipment()
    {
        return warband?.Stash.Any() ?? false;
    }

    private async Task OpenAddFromStashModal()
    {
        if (character == null || warband == null) return;

        // Load available equipment from stash that this character can equip
        availableStashEquipment = await StateService.GetAvailableEquipmentForCharacterAsync(WarbandId, character.Id);
        showAddFromStashModal = true;
    }

    private void CloseAddFromStashModal()
    {
        showAddFromStashModal = false;
    }

    private async Task AddEquipmentFromStash(Equipment equipment)
    {
        if (character == null) return;

        try
        {
            await StateService.TransferEquipmentToCharacterAsync(WarbandId, character.Id, equipment.Id);

            // Refresh data
            await LoadData();
            CloseAddFromStashModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to add new equipment");
            validationErrors.Add($"Failed to add equipment: {ex.Message}");
        }
    }

    private void OpenAddEquipmentModal()
    {
        showAddEquipmentModal = true;
    }

    private void CloseAddEquipmentModal()
    {
        showAddEquipmentModal = false;
    }

    private async Task BuyEquipment(Equipment equipment)
    {
        if (character == null || warband == null || string.IsNullOrEmpty(selectedTraderId)) return;

        try
        {
            Logger.LogInformation("Buying equipment {EquipmentName} (template ID: {TemplateId}) with trader {TraderId}",
                equipment.Name, equipment.Id, selectedTraderId);

            // Get stash count before buying
            var stashCountBefore = warband.Stash.Count;

            // Buy equipment (deducts gold, adds to warband stash)
            await StateService.BuyEquipmentAsync(warband.Id, equipment.Id, equipment.Type, selectedTraderId);

            // Reload warband to get updated stash
            var updatedWarband = await StateService.GetWarbandAsync(warband.Id);
            if (updatedWarband == null)
            {
                Logger.LogError("Failed to reload warband after buy");
                validationErrors.Add("Failed to reload warband");
                return;
            }

            Logger.LogInformation("Stash count before: {Before}, after: {After}", stashCountBefore, updatedWarband.Stash.Count);

            // Find the newly added equipment (last item in stash)
            if (updatedWarband.Stash.Count > stashCountBefore)
            {
                var newEquipment = updatedWarband.Stash[updatedWarband.Stash.Count - 1];
                Logger.LogInformation("Found new equipment in stash: {EquipmentName}, Instance ID: {InstanceId}",
                    newEquipment.Name, newEquipment.Id);

                await StateService.TransferEquipmentToCharacterAsync(warband.Id, character.Id, newEquipment.Id);
                Logger.LogInformation("Transferred equipment to character");
            }
            else
            {
                Logger.LogWarning("Equipment not found in stash after purchase");
            }

            // Refresh data and close modal
            await LoadData();
            CloseAddEquipmentModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to buy equipment");
            validationErrors.Add($"Failed to buy equipment: {ex.Message}");
        }
    }

    private async Task AddNewEquipment(Equipment equipment)
    {
        if (character == null) return;

        try
        {
            // Determine equipment type
            string equipmentType = equipment.Type.ToLower();

            // Add equipment directly (bypasses payment - for scenario rewards)
            await StateService.AddEquipmentToCharacterAsync(WarbandId, character.Id, equipment.Id, equipmentType);

            // Refresh data
            await LoadData();
            CloseAddEquipmentModal();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to add equipment from stash");
            validationErrors.Add($"Failed to add equipment: {ex.Message}");
        }
    }

    private async Task OnTraderChanged(string? traderId)
    {
        selectedTraderId = traderId;
        selectedTrader = !string.IsNullOrEmpty(traderId) && warband != null
            ? await TraderService.GetTraderByIdAsync(traderId, warband.GameVariant)
            : null;

        // Don't clear merchant inventory - it persists until manually cleared or rerolled
    }

    private void RollMerchantInventory()
    {
        if (selectedTrader == null || !selectedTrader.HasLimitedInventory) return;

        merchantInventoryIds.Clear();
        var random = new Random();

        // Roll weapons (max 3)
        var weaponCount = selectedTrader.MaxWeapons ?? 0;
        if (weaponCount > 0 && allWeapons.Any())
        {
            var selectedWeapons = allWeapons.OrderBy(x => random.Next()).Take(weaponCount);
            merchantInventoryIds.AddRange(selectedWeapons.Select(w => w.Id));
        }

        // Roll armor (max 1)
        var armorCount = selectedTrader.MaxArmor ?? 0;
        if (armorCount > 0 && allArmors.Any())
        {
            var selectedArmors = allArmors.OrderBy(x => random.Next()).Take(armorCount);
            merchantInventoryIds.AddRange(selectedArmors.Select(a => a.Id));
        }

        // Roll items/equipment (max 1)
        var itemCount = selectedTrader.MaxEquipment ?? 0;
        if (itemCount > 0 && allItems.Any())
        {
            var selectedItems = allItems.OrderBy(x => random.Next()).Take(itemCount);
            merchantInventoryIds.AddRange(selectedItems.Select(i => i.Id));
        }

        StateHasChanged();
    }

    private void ClearMerchantInventory()
    {
        merchantInventoryIds.Clear();
        StateHasChanged();
    }

    private List<Weapon> GetFilteredWeapons()
    {
        if (selectedTrader?.HasLimitedInventory != true || !merchantInventoryIds.Any())
            return allWeapons;

        return allWeapons.Where(w => merchantInventoryIds.Contains(w.Id)).ToList();
    }

    private List<Armor> GetFilteredArmors()
    {
        if (selectedTrader?.HasLimitedInventory != true || !merchantInventoryIds.Any())
            return allArmors;

        return allArmors.Where(a => merchantInventoryIds.Contains(a.Id)).ToList();
    }

    private List<Item> GetFilteredItems()
    {
        if (selectedTrader?.HasLimitedInventory != true || !merchantInventoryIds.Any())
            return allItems;

        return allItems.Where(i => merchantInventoryIds.Contains(i.Id)).ToList();
    }

    private int? CalculateBuyPrice(Equipment equipment)
    {
        if (selectedTrader == null) return equipment.Cost;
        return selectedTrader.CalculateBuyPrice(equipment.Cost);
    }

    private List<string> GetUnaffordableEquipmentIds()
    {
        if (warband == null) return new();

        var disabled = new List<string>();

        // If no trader selected, disable only buy button (equipment still selectable via Assign)
        if (selectedTrader == null)
        {
            return disabled;
        }

        // Trader selected - disable buy for equipment the warband can't afford
        foreach (var weapon in allWeapons)
        {
            if (weapon.Cost.HasValue)
            {
                var price = selectedTrader.CalculateBuyPrice(weapon.Cost.Value);
                if (!warband.CanAfford(price))
                {
                    disabled.Add(weapon.Id);
                }
            }
        }

        foreach (var armor in allArmors)
        {
            if (armor.Cost.HasValue)
            {
                var price = selectedTrader.CalculateBuyPrice(armor.Cost.Value);
                if (!warband.CanAfford(price))
                {
                    disabled.Add(armor.Id);
                }
            }
        }

        foreach (var item in allItems)
        {
            if (item.Cost.HasValue)
            {
                var price = selectedTrader.CalculateBuyPrice(item.Cost.Value);
                if (!warband.CanAfford(price))
                {
                    disabled.Add(item.Id);
                }
            }
        }

        return disabled;
    }

    private async Task RemoveEquipment(string equipmentId)
    {
        if (character == null) return;

        var equipment = character.Equipment.FirstOrDefault(e => e.Id == equipmentId);
        if (equipment == null) return;

        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Move {equipment.Name} to warband stash?" });
        if (!confirmed) return;

        try
        {
            await StateService.RemoveEquipmentFromCharacterAsync(WarbandId, character.Id, equipmentId);

            // Refresh data
            await LoadData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to remove equipment");
            validationErrors.Add($"Failed to remove equipment: {ex.Message}");
        }
    }

    private async Task SellEquipment(Equipment equipment)
    {
        if (character == null || warband == null || equipment == null) return;

        var sellPrice = equipment.Cost / 2;
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { $"Sell {equipment.Name} for {sellPrice} Gold?" });
        if (!confirmed) return;

        try
        {
            // Remove equipment from character
            await StateService.RemoveEquipmentFromCharacterAsync(WarbandId, character.Id, equipment.Id);

            // Add gold to warband
            warband.Gold += sellPrice;
            await StateService.UpdateWarbandAsync(warband);

            // Refresh data
            await LoadData();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to sell equipment");
            validationErrors.Add($"Failed to sell equipment: {ex.Message}");
        }
    }
}