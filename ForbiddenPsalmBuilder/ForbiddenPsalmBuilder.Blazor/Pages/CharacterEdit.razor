@page "/warband/{WarbandId}/character/{CharacterId}"
@page "/warband/{WarbandId}/character/new"
@using ForbiddenPsalmBuilder.Core.Services.State
@using ForbiddenPsalmBuilder.Core.Models.Warband
@using ForbiddenPsalmBuilder.Core.Models.Character
@using ForbiddenPsalmBuilder.Core.DTOs
@using Microsoft.AspNetCore.Components.Forms
@inject IGameStateService StateService
@inject NavigationManager Navigation

<PageTitle>
    @(IsNewCharacter ? "New Character" : $"Edit {character?.Name}") - Forbidden Psalm Builder
</PageTitle>

<PageHeader
    Title="@(IsNewCharacter ? "New Character" : $"Edit {character?.Name}")"
    Subtitle="@(warband?.Name ?? "Unknown Warband")"
    BreadcrumbItems="@GetBreadcrumbItems()">
    <Actions>
        <button type="button" @onclick="Cancel">
            <i class="fas fa-times"></i>
            Cancel
        </button>
    </Actions>
</PageHeader>

<main>
    @if (isLoading)
    {
        <section>
            <div role="status">
                <span>Loading...</span>
            </div>
            <p>@(IsNewCharacter ? "Preparing character creation..." : "Loading character...")</p>
        </section>
    }
    else if (warband == null)
    {
        <section>
            <i class="fas fa-exclamation-triangle"></i>
            <h3>Warband Not Found</h3>
            <p>The warband you're looking for doesn't exist or has been deleted.</p>
            <button @onclick="GoHome">
                <i class="fas fa-home"></i>
                Go Home
            </button>
        </section>
    }
    else
    {
        <EditForm Model="editCharacterDto" OnValidSubmit="SaveCharacter">
            <DataAnnotationsValidator />

            <!-- Character Info -->
            <section>
                <h2>Character Information</h2>
                <div>
                    <label for="characterName">Character Name</label>
                    <div class="horizontal gap-small">
                        <InputText
                            id="characterName"
                            @bind-Value="editCharacterDto.Name"
                            placeholder="Enter character name..." />
                        <button
                            type="button"
                            @onclick="GenerateNewCharacterName"
                            title="Generate new random name">
                            <i class="fas fa-dice"></i>
                        </button>
                    </div>
                    <ValidationMessage For="@(() => editCharacterDto.Name)" />
                </div>

                <div class="horizontal">
                    <div>
                        <label for="isSpellcaster">
                            <InputCheckbox id="isSpellcaster" @bind-Value="editCharacterDto.IsSpellcaster" />
                            Spellcaster
                        </label>
                    </div>
                </div>

                @if (availableSpecialTrooperTypes.Any())
                {
                    <div>
                        <label for="specialTrooperType">Special Trooper Type (Optional)</label>
                        <InputSelect id="specialTrooperType" @bind-Value="editCharacterDto.SpecialTrooperType">
                            <option value="">-- None --</option>
                            @foreach (var type in availableSpecialTrooperTypes)
                            {
                                <option value="@type">@type</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => editCharacterDto.SpecialTrooperType)" />
                    </div>
                }

                <div>
                    <label for="experience">Experience Points</label>
                    <InputNumber id="experience" @bind-Value="editCharacterDto.Experience" />
                    <ValidationMessage For="@(() => editCharacterDto.Experience)" />
                </div>
            </section>

            <!-- Stat Array Selection -->
            <section>
                <StatArraySelector
                    StatArrays="@availableStatArrays"
                    InitialAgility="@editCharacterDto.Agility"
                    InitialPresence="@editCharacterDto.Presence"
                    InitialStrength="@editCharacterDto.Strength"
                    InitialToughness="@editCharacterDto.Toughness"
                    OnStatsChanged="OnStatArrayStatsChanged"
                    OnArraySelectionChanged="OnStatArraySelectionChanged" />
            </section>

            <!-- Calculated Stats Display -->
            <section>
                <h2>Calculated Stats</h2>
                <StatsDisplay Stats="@GetCalculatedStats()" />
            </section>

            @if (validationErrors.Any())
            {
                <aside>
                    <strong>Validation Errors:</strong>
                    <ul>
                        @foreach (var error in validationErrors)
                        {
                            <li>@error</li>
                        }
                    </ul>
                </aside>
            }

            <footer class="horizontal">
                <button type="button" @onclick="Cancel">
                    <i class="fas fa-times"></i>
                    Cancel
                </button>
                <button type="submit" disabled="@(!IsValidForm())">
                    <i class="fas fa-save"></i>
                    @(IsNewCharacter ? "Create Character" : "Save Changes")
                </button>
            </footer>
        </EditForm>
    }
</main>

@code {
    [Parameter] public string WarbandId { get; set; } = string.Empty;
    [Parameter] public string? CharacterId { get; set; }

    private Warband? warband;
    private Character? character;
    private EditCharacterDto editCharacterDto = new();
    private List<string> validationErrors = new();
    private bool isLoading = true;
    private List<string> availableSpecialTrooperTypes = new();
    private List<ForbiddenPsalmBuilder.Core.Models.Character.StatArray> availableStatArrays = new();

    private bool IsNewCharacter => string.IsNullOrEmpty(CharacterId) || CharacterId == "new";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(WarbandId))
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        isLoading = true;
        validationErrors.Clear();

        try
        {
            warband = await StateService.GetWarbandAsync(WarbandId);

            if (warband == null)
            {
                return;
            }

            // Load available special trooper types for this game variant
            availableSpecialTrooperTypes = await StateService.GetSpecialTrooperTypesAsync(warband.GameVariant);

            // Load available stat arrays
            availableStatArrays = await StateService.GetStatArraysAsync();

            if (IsNewCharacter)
            {
                editCharacterDto = new EditCharacterDto
                {
                    Id = Guid.NewGuid().ToString(),
                    Name = $"Member {warband.Members.Count + 1}",
                    Agility = 0,
                    Presence = 0,
                    Strength = 0,
                    Toughness = 0,
                    Experience = 0,
                    IsSpellcaster = false
                };
            }
            else
            {
                character = warband.Members.FirstOrDefault(m => m.Id == CharacterId);
                if (character != null)
                {
                    editCharacterDto = new EditCharacterDto
                    {
                        Id = character.Id,
                        Name = character.Name,
                        Agility = character.Stats.Agility,
                        Presence = character.Stats.Presence,
                        Strength = character.Stats.Strength,
                        Toughness = character.Stats.Toughness,
                        Experience = character.Experience,
                        IsSpellcaster = character.IsSpellcaster,
                        SpecialTrooperType = character.SpecialTrooperType
                    };
                }
            }
        }
        catch (Exception ex)
        {
            await StateService.SetErrorAsync($"Failed to load data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SaveCharacter()
    {
        Console.WriteLine($"SaveCharacter called - IsNewCharacter: {IsNewCharacter}");
        Console.WriteLine($"Stats: AGI={editCharacterDto.Agility}, PRE={editCharacterDto.Presence}, STR={editCharacterDto.Strength}, TGH={editCharacterDto.Toughness}");

        validationErrors.Clear();

        try
        {
            if (IsNewCharacter)
            {
                Console.WriteLine("Creating new character...");
                var newCharacter = new Character(editCharacterDto.Name)
                {
                    Id = editCharacterDto.Id,
                    Stats = new Stats(
                        editCharacterDto.Agility,
                        editCharacterDto.Presence,
                        editCharacterDto.Strength,
                        editCharacterDto.Toughness
                    ),
                    Experience = editCharacterDto.Experience,
                    IsSpellcaster = editCharacterDto.IsSpellcaster,
                    SpecialTrooperType = editCharacterDto.SpecialTrooperType
                };
                newCharacter.CurrentHP = newCharacter.Stats.HP;

                await StateService.AddCharacterToWarbandAsync(WarbandId, newCharacter);
                Console.WriteLine("Character created successfully");
            }
            else if (character != null)
            {
                Console.WriteLine($"Updating existing character {CharacterId}...");
                character.Name = editCharacterDto.Name.Trim();
                character.Stats = new Stats(
                    editCharacterDto.Agility,
                    editCharacterDto.Presence,
                    editCharacterDto.Strength,
                    editCharacterDto.Toughness
                );
                character.Experience = editCharacterDto.Experience;
                character.IsSpellcaster = editCharacterDto.IsSpellcaster;
                character.SpecialTrooperType = editCharacterDto.SpecialTrooperType;

                // Update current HP if toughness changed
                if (character.CurrentHP > character.Stats.HP)
                {
                    character.CurrentHP = character.Stats.HP;
                }

                Console.WriteLine($"Calling UpdateCharacterAsync with stats: AGI={character.Stats.Agility}, PRE={character.Stats.Presence}, STR={character.Stats.Strength}, TGH={character.Stats.Toughness}");
                await StateService.UpdateCharacterAsync(WarbandId, CharacterId!, character);
                Console.WriteLine("Character updated successfully");
            }

            Console.WriteLine($"Navigating to /warband/{WarbandId}");
            Navigation.NavigateTo($"/warband/{WarbandId}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ERROR in SaveCharacter: {ex.Message}");
            Console.WriteLine($"Stack trace: {ex.StackTrace}");
            await StateService.SetErrorAsync($"Failed to save character: {ex.Message}");
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo($"/warband/{WarbandId}");
    }

    private void GoHome()
    {
        Navigation.NavigateTo("/");
    }

    private bool IsValidForm()
    {
        if (editCharacterDto == null)
        {
            Console.WriteLine("IsValidForm: editCharacterDto is null");
            return false;
        }
        if (string.IsNullOrWhiteSpace(editCharacterDto.Name))
        {
            Console.WriteLine("IsValidForm: Name is empty");
            return false;
        }
        if (editCharacterDto.Agility < -3 || editCharacterDto.Agility > 3)
        {
            Console.WriteLine($"IsValidForm: Agility out of range: {editCharacterDto.Agility}");
            return false;
        }
        if (editCharacterDto.Presence < -3 || editCharacterDto.Presence > 3)
        {
            Console.WriteLine($"IsValidForm: Presence out of range: {editCharacterDto.Presence}");
            return false;
        }
        if (editCharacterDto.Strength < -3 || editCharacterDto.Strength > 3)
        {
            Console.WriteLine($"IsValidForm: Strength out of range: {editCharacterDto.Strength}");
            return false;
        }
        if (editCharacterDto.Toughness < -3 || editCharacterDto.Toughness > 3)
        {
            Console.WriteLine($"IsValidForm: Toughness out of range: {editCharacterDto.Toughness}");
            return false;
        }
        if (editCharacterDto.Experience < 0 || editCharacterDto.Experience > 1000)
        {
            Console.WriteLine($"IsValidForm: Experience out of range: {editCharacterDto.Experience}");
            return false;
        }
        Console.WriteLine($"IsValidForm: VALID - Stats: AGI={editCharacterDto.Agility}, PRE={editCharacterDto.Presence}, STR={editCharacterDto.Strength}, TGH={editCharacterDto.Toughness}");
        return true;
    }

    private List<ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem> GetBreadcrumbItems()
    {
        return new List<ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem>
        {
            new ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem
            {
                Text = "Home",
                Href = "/"
            },
            new ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem
            {
                Text = warband?.Name ?? "Warband",
                Href = $"/warband/{WarbandId}"
            },
            new ForbiddenPsalmBuilder.Components.PageHeader.BreadcrumbItem
            {
                Text = IsNewCharacter ? "New Character" : "Edit Character",
                Href = null
            }
        };
    }

    private List<ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem> GetCalculatedStats()
    {
        return new List<ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem>
        {
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = editCharacterDto.Movement.ToString(),
                Label = "Movement"
            },
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = editCharacterDto.HP.ToString(),
                Label = "Hit Points"
            },
            new ForbiddenPsalmBuilder.Components.StatsDisplay.StatItem
            {
                Value = editCharacterDto.EquipmentSlots.ToString(),
                Label = "Equipment Slots"
            }
        };
    }

    private void OnStatArrayStatsChanged((int Agility, int Presence, int Strength, int Toughness) stats)
    {
        Console.WriteLine($"OnStatArrayStatsChanged called: AGI={stats.Agility}, PRE={stats.Presence}, STR={stats.Strength}, TGH={stats.Toughness}");
        editCharacterDto.Agility = stats.Agility;
        editCharacterDto.Presence = stats.Presence;
        editCharacterDto.Strength = stats.Strength;
        editCharacterDto.Toughness = stats.Toughness;
        Console.WriteLine($"Updated editCharacterDto: AGI={editCharacterDto.Agility}, PRE={editCharacterDto.Presence}, STR={editCharacterDto.Strength}, TGH={editCharacterDto.Toughness}");
        StateHasChanged();
    }

    private void OnStatArraySelectionChanged(string arrayId)
    {
        // This method can be simplified or removed if no longer needed
        StateHasChanged();
    }

    private async Task GenerateNewCharacterName()
    {
        if (warband == null) return;
        editCharacterDto.Name = await StateService.GenerateCharacterNameAsync(warband.GameVariant);
        StateHasChanged();
    }
}