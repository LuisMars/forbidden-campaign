@namespace ForbiddenPsalmBuilder.Components

<div class="stat-array-selector">
    @if (StatArrays.Any())
    {
        <div class="stat-array-header">
            <h3>Stat Distribution</h3>
            <div class="array-options horizontal gap-small">
                @foreach (var array in StatArrays)
                {
                    <button type="button"
                            class="array-option-compact @(SelectedArrayId == array.Id ? "selected" : "")"
                            @onclick="() => SelectArray(array.Id)">
                        <strong>@array.Name</strong>
                        <span class="array-values-inline">
                            [@string.Join(", ", array.Values.Select(v => (v >= 0 ? "+" : "") + v))]
                        </span>
                    </button>
                }

                <button type="button"
                        class="array-option-compact @(SelectedArrayId == "unset" ? "selected" : "")"
                        @onclick="@(() => SelectArray("unset"))">
                    <strong>Custom</strong>
                </button>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(SelectedArrayId) && SelectedArrayId != "unset")
        {
            <div class="stat-assignment">
                <div class="assignment-grid">
                    <div class="stat-assignment-row">
                        <select @bind="AgilityIndex" @bind:after="NotifyStatsChanged" class="stat-selector">
                            <option value="-1">-</option>
                            @for (int i = 0; i < (GetSelectedArray()?.Values.Length ?? 0); i++)
                            {
                                var value = GetSelectedArray()!.Values[i];
                                <option value="@i">@(value >= 0 ? "+" : "")@value</option>
                            }
                        </select>
                        <label>AGI</label>
                    </div>

                    <div class="stat-assignment-row">
                        <select @bind="PresenceIndex" @bind:after="NotifyStatsChanged" class="stat-selector">
                            <option value="-1">-</option>
                            @for (int i = 0; i < (GetSelectedArray()?.Values.Length ?? 0); i++)
                            {
                                var value = GetSelectedArray()!.Values[i];
                                <option value="@i" disabled="@(IsIndexUsed(i, nameof(PresenceIndex)))">@(value >= 0 ? "+" : "")@value</option>
                            }
                        </select>
                        <label>PRE</label>
                    </div>

                    <div class="stat-assignment-row">
                        <select @bind="StrengthIndex" @bind:after="NotifyStatsChanged" class="stat-selector">
                            <option value="-1">-</option>
                            @for (int i = 0; i < (GetSelectedArray()?.Values.Length ?? 0); i++)
                            {
                                var value = GetSelectedArray()!.Values[i];
                                <option value="@i" disabled="@(IsIndexUsed(i, nameof(StrengthIndex)))">@(value >= 0 ? "+" : "")@value</option>
                            }
                        </select>
                        <label>STR</label>
                    </div>

                    <div class="stat-assignment-row">
                        <select @bind="ToughnessIndex" @bind:after="NotifyStatsChanged" class="stat-selector">
                            <option value="-1">-</option>
                            @for (int i = 0; i < (GetSelectedArray()?.Values.Length ?? 0); i++)
                            {
                                var value = GetSelectedArray()!.Values[i];
                                <option value="@i" disabled="@(IsIndexUsed(i, nameof(ToughnessIndex)))">@(value >= 0 ? "+" : "")@value</option>
                            }
                        </select>
                        <label>TOU</label>
                    </div>
                </div>

                @if (HasDuplicateAssignments())
                {
                    <div class="validation-error">
                        <i class="fas fa-exclamation-triangle"></i>
                        Each stat value can only be used once. Please ensure all assignments are unique.
                    </div>
                }
            </div>
        }
        else if (SelectedArrayId == "unset")
        {
            <div class="stat-assignment">
                <div class="assignment-grid">
                    <div class="stat-assignment-row">
                        <input type="number" @bind="ManualAgility" @bind:event="oninput" @onchange="OnManualStatChanged" class="stat-selector" min="-3" max="3" />
                        <label>AGI</label>
                    </div>

                    <div class="stat-assignment-row">
                        <input type="number" @bind="ManualPresence" @bind:event="oninput" @onchange="OnManualStatChanged" class="stat-selector" min="-3" max="3" />
                        <label>PRE</label>
                    </div>

                    <div class="stat-assignment-row">
                        <input type="number" @bind="ManualStrength" @bind:event="oninput" @onchange="OnManualStatChanged" class="stat-selector" min="-3" max="3" />
                        <label>STR</label>
                    </div>

                    <div class="stat-assignment-row">
                        <input type="number" @bind="ManualToughness" @bind:event="oninput" @onchange="OnManualStatChanged" class="stat-selector" min="-3" max="3" />
                        <label>TOU</label>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="no-arrays">
            <p>No stat arrays available for this game variant.</p>
            <p>You can set stats manually using the individual attribute inputs.</p>
        </div>
    }

    <div class="modal-actions">
        <button type="button" @onclick="Close">
            <i class="fas fa-check"></i> Done
        </button>
    </div>
</div>

@code {
    [Parameter] public List<ForbiddenPsalmBuilder.Core.Models.Character.StatArray> StatArrays { get; set; } = new();
    [Parameter] public EventCallback<(int Agility, int Presence, int Strength, int Toughness)> OnStatsChanged { get; set; }
    [Parameter] public EventCallback<string> OnArraySelectionChanged { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public int? InitialAgility { get; set; }
    [Parameter] public int? InitialPresence { get; set; }
    [Parameter] public int? InitialStrength { get; set; }
    [Parameter] public int? InitialToughness { get; set; }

    private string SelectedArrayId = string.Empty;
    private int AgilityIndex = -1;
    private int PresenceIndex = -1;
    private int StrengthIndex = -1;
    private int ToughnessIndex = -1;
    private bool _initialized = false;

    // Manual stat values
    private int ManualAgility = 0;
    private int ManualPresence = 0;
    private int ManualStrength = 0;
    private int ManualToughness = 0;

    protected override void OnParametersSet()
    {
        if (_initialized) return;

        // Try to match existing stats to a stat array
        if (InitialAgility.HasValue && InitialPresence.HasValue && InitialStrength.HasValue && InitialToughness.HasValue)
        {
            var stats = new[] { InitialAgility.Value, InitialPresence.Value, InitialStrength.Value, InitialToughness.Value };
            var sortedStats = stats.OrderBy(s => s).ToArray();

            // Try to find a matching stat array
            foreach (var array in StatArrays)
            {
                var sortedArrayValues = array.Values.OrderBy(v => v).ToArray();
                if (sortedArrayValues.SequenceEqual(sortedStats))
                {
                    // Found matching array, now find the exact assignment
                    // Handle duplicate values by tracking which indices are already used
                    SelectedArrayId = array.Id;
                    var usedIndices = new HashSet<int>();

                    AgilityIndex = FindIndexForValue(array.Values, InitialAgility.Value, usedIndices);
                    PresenceIndex = FindIndexForValue(array.Values, InitialPresence.Value, usedIndices);
                    StrengthIndex = FindIndexForValue(array.Values, InitialStrength.Value, usedIndices);
                    ToughnessIndex = FindIndexForValue(array.Values, InitialToughness.Value, usedIndices);

                    _initialized = true;
                    return;
                }
            }

            // No match found, use custom/manual
            SelectedArrayId = "unset";
            ManualAgility = InitialAgility.Value;
            ManualPresence = InitialPresence.Value;
            ManualStrength = InitialStrength.Value;
            ManualToughness = InitialToughness.Value;
            _initialized = true;
        }
        else
        {
            // Default to the first stat array (Specialist) for new characters
            if (string.IsNullOrEmpty(SelectedArrayId))
            {
                SelectedArrayId = StatArrays.FirstOrDefault()?.Id ?? "unset";
            }
        }
    }

    private async Task SelectArray(string arrayId)
    {
        SelectedArrayId = arrayId;

        // Notify parent about array selection change
        await OnArraySelectionChanged.InvokeAsync(arrayId);

        if (arrayId == "unset")
        {
            // Don't apply any stat array, let user set manually
            await OnStatsChanged.InvokeAsync((0, 0, 0, 0));
        }
        else
        {
            // Reset assignments to default order
            AgilityIndex = 0;
            PresenceIndex = 1;
            StrengthIndex = 2;
            ToughnessIndex = 3;

            await NotifyStatsChanged();
        }
    }

    private ForbiddenPsalmBuilder.Core.Models.Character.StatArray? GetSelectedArray()
    {
        return StatArrays.FirstOrDefault(a => a.Id == SelectedArrayId);
    }

    private bool IsIndexUsed(int index, string excludeProperty)
    {
        var usedIndices = new List<int>();

        if (excludeProperty != nameof(AgilityIndex) && AgilityIndex >= 0) usedIndices.Add(AgilityIndex);
        if (excludeProperty != nameof(PresenceIndex) && PresenceIndex >= 0) usedIndices.Add(PresenceIndex);
        if (excludeProperty != nameof(StrengthIndex) && StrengthIndex >= 0) usedIndices.Add(StrengthIndex);
        if (excludeProperty != nameof(ToughnessIndex) && ToughnessIndex >= 0) usedIndices.Add(ToughnessIndex);

        return usedIndices.Contains(index);
    }

    private bool HasDuplicateAssignments()
    {
        var indices = new[] { AgilityIndex, PresenceIndex, StrengthIndex, ToughnessIndex }.Where(i => i >= 0).ToArray();
        return indices.Length != indices.Distinct().Count();
    }

    private int FindIndexForValue(int[] arrayValues, int value, HashSet<int> usedIndices)
    {
        for (int i = 0; i < arrayValues.Length; i++)
        {
            if (arrayValues[i] == value && !usedIndices.Contains(i))
            {
                usedIndices.Add(i);
                return i;
            }
        }
        return -1; // Should never happen if the array was matched correctly
    }

    private async Task NotifyStatsChanged()
    {
        if (GetSelectedArray() == null) return;

        var array = GetSelectedArray()!;

        var agility = AgilityIndex >= 0 ? array.Values[AgilityIndex] : 0;
        var presence = PresenceIndex >= 0 ? array.Values[PresenceIndex] : 0;
        var strength = StrengthIndex >= 0 ? array.Values[StrengthIndex] : 0;
        var toughness = ToughnessIndex >= 0 ? array.Values[ToughnessIndex] : 0;

        await OnStatsChanged.InvokeAsync((agility, presence, strength, toughness));
    }

    private async Task OnManualStatChanged()
    {
        await OnStatsChanged.InvokeAsync((ManualAgility, ManualPresence, ManualStrength, ManualToughness));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !string.IsNullOrEmpty(SelectedArrayId))
        {
            await NotifyStatsChanged();
        }
    }

    private async Task Close()
    {
        if (OnClose.HasDelegate)
        {
            await OnClose.InvokeAsync();
        }
    }
}