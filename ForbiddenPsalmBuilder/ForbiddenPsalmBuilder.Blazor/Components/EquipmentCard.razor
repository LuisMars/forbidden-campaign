@namespace ForbiddenPsalmBuilder.Components
@using ForbiddenPsalmBuilder.Core.Models.Character

<div class="equipment-card @(CompactMode ? "compact" : "") @(IsSelected ? "selected" : "") @(IsDisabled ? "disabled" : "")" @onclick="HandleClick">
    @if (!string.IsNullOrEmpty(Equipment.IconClass))
    {
        <i class="@Equipment.IconClass equipment-icon"></i>
    }
    else
    {
        @if (!string.IsNullOrEmpty(Equipment.Damage))
        {
            <i class="ra ra-crossed-swords equipment-icon"></i>
        }
        else if (Equipment.IsArmor)
        {
            <i class="ra ra-shield equipment-icon"></i>
        }
        else
        {
            <i class="fas fa-box equipment-icon"></i>
        }
    }

    <div class="equipment-info">
        <div class="equipment-name">@Equipment.Name</div>

        @if (!CompactMode)
        {
            <div class="equipment-stats">
                @if (!string.IsNullOrEmpty(Equipment.Damage))
                {
                    <span class="stat-badge damage">
                        <i class="ra ra-crossed-swords"></i> @Equipment.Damage
                    </span>
                }

                @if (Equipment.ArmorValue > 0)
                {
                    <span class="stat-badge armor">
                        <i class="ra ra-shield"></i> @Equipment.ArmorValue
                    </span>
                }

                @if (!string.IsNullOrEmpty(Equipment.ArmorType))
                {
                    <span class="stat-badge armor-type">
                        @Equipment.ArmorType
                    </span>
                }

                @if (!string.IsNullOrEmpty(Equipment.Stat))
                {
                    <span class="stat-badge stat">
                        @Equipment.Stat
                    </span>
                }

                @if (Equipment.Slots > 0)
                {
                    <span class="stat-badge slots">
                        <i class="fas fa-box"></i> @Equipment.Slots
                    </span>
                }
            </div>

            @if (Equipment.Properties?.Any() == true)
            {
                <div class="equipment-properties">
                    @foreach (var property in Equipment.Properties)
                    {
                        <span class="property-badge">@property</span>
                    }
                </div>
            }

            @if (!string.IsNullOrEmpty(Equipment.Special))
            {
                <div class="equipment-special">@Equipment.Special</div>
            }

            @if (!string.IsNullOrEmpty(Equipment.Effect))
            {
                <div class="equipment-effect">@Equipment.Effect</div>
            }
        }
    </div>

    @if (ShowPrice && Price.HasValue)
    {
        <div class="equipment-price">
            @if (Price.Value > 0)
            {
                <span>@Price.Value@CurrencySymbol</span>
            }
            else
            {
                <span class="price-free">FREE</span>
            }
        </div>
    }

    @if (ShowActions)
    {
        <div class="equipment-actions" @onclick:stopPropagation="true">
            @if (OnRemove.HasDelegate)
            {
                <button type="button" @onclick="HandleRemove" class="button-small button-danger" title="Remove">
                    <i class="fas fa-times"></i>
                </button>
            }

            @if (OnBuy.HasDelegate)
            {
                <button type="button" @onclick="HandleBuy" class="button-small" title="Buy" disabled="@IsDisabled">
                    <i class="fas fa-shopping-cart"></i>
                    Buy
                </button>
            }

            @if (OnSell.HasDelegate)
            {
                <button type="button" @onclick="HandleSell" class="button-small" title="Sell">
                    <i class="fas fa-coins"></i>
                    Sell
                </button>
            }

            @if (OnAssign.HasDelegate)
            {
                <button type="button" @onclick="HandleAssign" class="button-small" title="Assign to character">
                    <i class="ra ra-person"></i>
                    Assign
                </button>
            }
        </div>
    }

    @if (IsSelected)
    {
        <i class="fas fa-check-circle card-selected"></i>
    }
</div>

@using Microsoft.Extensions.Logging

@code {
    [Parameter, EditorRequired]
    public Equipment Equipment { get; set; } = null!;

    [Parameter]
    public bool ShowPrice { get; set; } = false;

    [Inject]
    public ILogger<EquipmentCard> Logger { get; set; } = null!;

    [Parameter]
    public int? Price { get; set; }

    [Parameter]
    public string CurrencySymbol { get; set; } = "G";

    [Parameter]
    public bool ShowActions { get; set; } = false;

    [Parameter]
    public bool IsSelected { get; set; } = false;

    [Parameter]
    public bool CompactMode { get; set; } = false;

    [Parameter]
    public bool IsDisabled { get; set; } = false;

    [Parameter]
    public EventCallback OnClick { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnBuy { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnSell { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnRemove { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnAssign { get; set; }

    private async Task HandleClick()
    {
        if (!IsDisabled && OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }
    }

    private async Task HandleBuy()
    {
        Logger.LogInformation("HandleBuy clicked for {EquipmentName}, IsDisabled: {IsDisabled}, HasDelegate: {HasDelegate}", Equipment?.Name, IsDisabled, OnBuy.HasDelegate);
        if (!IsDisabled && OnBuy.HasDelegate)
        {
            await OnBuy.InvokeAsync(Equipment);
        }
    }

    private async Task HandleSell()
    {
        Logger.LogInformation("HandleSell clicked for {EquipmentName}, HasDelegate: {HasDelegate}", Equipment?.Name, OnSell.HasDelegate);
        if (OnSell.HasDelegate)
        {
            await OnSell.InvokeAsync(Equipment);
        }
    }

    private async Task HandleRemove()
    {
        Logger.LogInformation("HandleRemove clicked for {EquipmentName}, HasDelegate: {HasDelegate}", Equipment?.Name, OnRemove.HasDelegate);
        if (OnRemove.HasDelegate)
        {
            await OnRemove.InvokeAsync(Equipment);
        }
    }

    private async Task HandleAssign()
    {
        Logger.LogInformation("HandleAssign clicked for {EquipmentName}, HasDelegate: {HasDelegate}", Equipment?.Name, OnAssign.HasDelegate);
        if (OnAssign.HasDelegate)
        {
            await OnAssign.InvokeAsync(Equipment);
        }
    }
}
