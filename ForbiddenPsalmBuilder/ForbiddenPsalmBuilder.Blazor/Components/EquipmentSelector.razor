@namespace ForbiddenPsalmBuilder.Components
@using ForbiddenPsalmBuilder.Core.Models.Selection
@using ForbiddenPsalmBuilder.Core.Models.Character
@using Microsoft.Extensions.Logging

<div class="equipment-selector @(UseCompactMode ? "with-side-panel" : "")">
    @if (ShowTabs)
    {
        <div class="equipment-tabs">
            <button type="button"
                    class="tab-button @(activeTab == "all" ? "active" : "")"
                    @onclick="SetTabAll">
                All (@GetFilteredEquipment("all").Count)
            </button>
            <button type="button"
                    class="tab-button @(activeTab == "weapons" ? "active" : "")"
                    @onclick="SetTabWeapons">
                <i class="ra ra-crossed-swords"></i> Weapons (@GetFilteredEquipment("weapons").Count)
            </button>
            <button type="button"
                    class="tab-button @(activeTab == "armor" ? "active" : "")"
                    @onclick="SetTabArmor">
                <i class="ra ra-shield"></i> Armor (@GetFilteredEquipment("armor").Count)
            </button>
            <button type="button"
                    class="tab-button @(activeTab == "items" ? "active" : "")"
                    @onclick="SetTabItems">
                <i class="fas fa-box"></i> Items (@GetFilteredEquipment("items").Count)
            </button>
        </div>
    }

    @if (ShowSearch)
    {
        <div class="equipment-search">
            <input type="text"
                   class="search-input"
                   placeholder="Search equipment..."
                   @bind="searchQuery"
                   @bind:event="oninput" />
            @if (!string.IsNullOrEmpty(searchQuery))
            {
                <button type="button" class="clear-search" @onclick="ClearSearch">
                    <i class="fas fa-times"></i>
                </button>
            }
        </div>
    }

    @if (activeTab == "weapons" && Weapons.Any())
    {
        <div class="equipment-filter">
            <div class="filter-group">
                <button type="button"
                        class="filter-button @(weaponHandFilter == "all" ? "active" : "")"
                        @onclick='() => weaponHandFilter = "all"'>
                    All Hands
                </button>
                <button type="button"
                        class="filter-button @(weaponHandFilter == "one-handed" ? "active" : "")"
                        @onclick='() => weaponHandFilter = "one-handed"'>
                    One-Handed
                </button>
                <button type="button"
                        class="filter-button @(weaponHandFilter == "two-handed" ? "active" : "")"
                        @onclick='() => weaponHandFilter = "two-handed"'>
                    Two-Handed
                </button>
            </div>
            <div class="filter-group">
                <button type="button"
                        class="filter-button @(weaponTypeFilter == "all" ? "active" : "")"
                        @onclick='() => weaponTypeFilter = "all"'>
                    All Types
                </button>
                <button type="button"
                        class="filter-button @(weaponTypeFilter == "melee" ? "active" : "")"
                        @onclick='() => weaponTypeFilter = "melee"'>
                    Melee
                </button>
                <button type="button"
                        class="filter-button @(weaponTypeFilter == "ranged" ? "active" : "")"
                        @onclick='() => weaponTypeFilter = "ranged"'>
                    Ranged
                </button>
            </div>
        </div>
    }

    <div class="@(UseCompactMode ? "equipment-list" : "equipment-grid")">
        @{
            var filteredEquipment = GetFilteredEquipment(activeTab);

            // Apply weapon filters
            if (activeTab == "weapons")
            {
                // Apply hand filter
                if (weaponHandFilter != "all")
                {
                    filteredEquipment = filteredEquipment.Where(e =>
                    {
                        if (weaponHandFilter == "one-handed")
                            return e.Slots == 1;
                        if (weaponHandFilter == "two-handed")
                            return e.Slots == 2;
                        return true;
                    }).ToList();
                }

                // Apply type filter (melee vs ranged)
                if (weaponTypeFilter != "all")
                {
                    filteredEquipment = filteredEquipment.Where(e =>
                    {
                        var category = !string.IsNullOrEmpty(e.Category) ? e.Category.ToLower() : "";

                        if (weaponTypeFilter == "melee")
                        {
                            // Check if category contains "melee" OR if it doesn't have "ranged" property and isn't a throwable
                            return category.Contains("melee") ||
                                   (!e.Properties.Any(p => p.Equals("Ranged", StringComparison.OrdinalIgnoreCase)) &&
                                    !category.Contains("throwable"));
                        }
                        if (weaponTypeFilter == "ranged")
                        {
                            // Check if category contains "ranged" OR has "Ranged" property
                            return category.Contains("ranged") ||
                                   e.Properties.Any(p => p.Equals("Ranged", StringComparison.OrdinalIgnoreCase));
                        }
                        return true;
                    }).ToList();
                }
            }

            if (!string.IsNullOrEmpty(searchQuery))
            {
                var query = searchQuery.ToLower();
                filteredEquipment = filteredEquipment
                    .Where(e =>
                        e.Name.ToLower().Contains(query) ||
                        (e.Special?.ToLower().Contains(query) ?? false) ||
                        (e.Effect?.ToLower().Contains(query) ?? false) ||
                        e.Properties.Any(p => p.ToLower().Contains(query)))
                    .ToList();
            }

            if (filteredEquipment.Count == 0)
            {
                <div class="no-results">
                    <i class="fas fa-search"></i>
                    <p>No equipment found</p>
                </div>
            }
            else
            {
                foreach (var equipment in filteredEquipment)
                {
                    var isSelected = SelectedEquipmentId == equipment.Id;
                    var isDisabled = DisabledEquipmentIds?.Contains(equipment.Id) ?? false;
                    var price = PriceCalculator?.Invoke(equipment);

                    <EquipmentCard Equipment="equipment"
                                   CompactMode="UseCompactMode"
                                   ShowPrice="ShowPrice"
                                   Price="price"
                                   ShowActions="@(!UseCompactMode && ShowActions)"
                                   IsSelected="isSelected"
                                   IsDisabled="isDisabled"
                                   OnClick="() => HandleEquipmentClick(equipment)"
                                   OnBuy="@GetBuyCallback()"
                                   OnSell="@GetSellCallback()"
                                   OnRemove="@GetRemoveCallback()"
                                   OnAssign="@GetAssignCallback()" />
                }
            }
        }
    </div>

    @if (UseCompactMode && selectedEquipmentForPanel != null)
    {
        <div class="equipment-side-panel">
            <div class="side-panel-header">
                <h3>@selectedEquipmentForPanel.Name</h3>
                <button type="button" class="close-button" @onclick="CloseSidePanel">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <div class="side-panel-content">
                @if (!string.IsNullOrEmpty(selectedEquipmentForPanel.Damage))
                {
                    <div class="detail-row">
                        <span class="detail-label"><i class="ra ra-crossed-swords"></i> Damage:</span>
                        <span class="detail-value">@selectedEquipmentForPanel.Damage</span>
                    </div>
                }

                @if (selectedEquipmentForPanel.ArmorValue > 0)
                {
                    <div class="detail-row">
                        <span class="detail-label"><i class="ra ra-shield"></i> Armor:</span>
                        <span class="detail-value">@selectedEquipmentForPanel.ArmorValue</span>
                    </div>
                }

                @if (!string.IsNullOrEmpty(selectedEquipmentForPanel.ArmorType))
                {
                    <div class="detail-row">
                        <span class="detail-label">Type:</span>
                        <span class="detail-value">@selectedEquipmentForPanel.ArmorType</span>
                    </div>
                }

                @if (selectedEquipmentForPanel.Slots > 0)
                {
                    <div class="detail-row">
                        <span class="detail-label"><i class="fas fa-box"></i> Slots:</span>
                        <span class="detail-value">@selectedEquipmentForPanel.Slots</span>
                    </div>
                }

                @if (!string.IsNullOrEmpty(selectedEquipmentForPanel.Stat))
                {
                    <div class="detail-row">
                        <span class="detail-label">Stat:</span>
                        <span class="detail-value">@selectedEquipmentForPanel.Stat</span>
                    </div>
                }

                @if (selectedEquipmentForPanel.Properties?.Any() == true)
                {
                    <div class="detail-row">
                        <span class="detail-label">Properties:</span>
                        <div class="detail-value">
                            @foreach (var prop in selectedEquipmentForPanel.Properties)
                            {
                                <span class="property-tag">@prop</span>
                            }
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(selectedEquipmentForPanel.Special))
                {
                    <div class="detail-row">
                        <span class="detail-label">Special:</span>
                        <span class="detail-value">@selectedEquipmentForPanel.Special</span>
                    </div>
                }

                @if (!string.IsNullOrEmpty(selectedEquipmentForPanel.Effect))
                {
                    <div class="detail-row">
                        <span class="detail-label">Effect:</span>
                        <span class="detail-value">@selectedEquipmentForPanel.Effect</span>
                    </div>
                }

                @if (ShowPrice && selectedEquipmentPrice.HasValue)
                {
                    <div class="detail-row price-row">
                        <span class="detail-label">Price:</span>
                        <span class="detail-value price">@selectedEquipmentPrice.Value@CurrencySymbol</span>
                    </div>
                }
            </div>

            @if (ShowActions)
            {
                @if (WarbandMoney.HasValue)
                {
                    <div class="warband-money">
                        <span>Available:</span>
                        <span><i class="fas fa-coins"></i> @WarbandMoney.Value G</span>
                    </div>
                }

                <div class="side-panel-actions">
                    @if (OnBuy.HasDelegate)
                    {
                        <button type="button" @onclick="() => HandleBuy(selectedEquipmentForPanel)"
                                class="button-small"
                                disabled="@(DisableBuyButton || (DisabledEquipmentIds?.Contains(selectedEquipmentForPanel.Id) ?? false))">
                            <i class="fas fa-shopping-cart"></i>
                            Buy
                        </button>
                    }

                    @if (OnSell.HasDelegate)
                    {
                        <button type="button" @onclick="() => HandleSell(selectedEquipmentForPanel)"
                                class="button-small">
                            <i class="fas fa-coins"></i>
                            Sell
                        </button>
                    }

                    @if (OnRemove.HasDelegate)
                    {
                        <button type="button" @onclick="() => HandleRemove(selectedEquipmentForPanel)"
                                class="button-small button-danger">
                            <i class="fas fa-times"></i>
                            Remove
                        </button>
                    }

                    @if (OnAssign.HasDelegate)
                    {
                        <button type="button" @onclick="() => HandleAssign(selectedEquipmentForPanel)"
                                class="button-small">
                            <i class="fas fa-user"></i>
                            Assign
                        </button>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public List<Equipment> Equipment { get; set; } = new();

    [Parameter]
    public List<Weapon> Weapons { get; set; } = new();

    [Parameter]
    public List<Armor> Armors { get; set; } = new();

    [Parameter]
    public List<Item> Items { get; set; } = new();

    [Parameter]
    public string? SelectedEquipmentId { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnEquipmentSelected { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnBuy { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnSell { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnRemove { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnAssign { get; set; }

    [Parameter]
    public bool ShowTabs { get; set; } = true;

    [Parameter]
    public bool ShowSearch { get; set; } = true;

    [Parameter]
    public bool ShowPrice { get; set; } = false;

    [Parameter]
    public bool ShowActions { get; set; } = false;

    [Parameter]
    public Func<Equipment, int?>? PriceCalculator { get; set; }

    [Parameter]
    public List<string>? DisabledEquipmentIds { get; set; }

    [Parameter]
    public string InitialTab { get; set; } = "all";

    [Parameter]
    public bool UseCompactMode { get; set; } = false;

    [Parameter]
    public string CurrencySymbol { get; set; } = "G";

    [Parameter]
    public bool DisableBuyButton { get; set; } = false;

    [Parameter]
    public int? WarbandMoney { get; set; }

    private string activeTab = "all";
    private string searchQuery = string.Empty;
    private string weaponHandFilter = "all";
    private string weaponTypeFilter = "all";
    private Equipment? selectedEquipmentForPanel;
    private int? selectedEquipmentPrice;

    protected override void OnInitialized()
    {
        activeTab = InitialTab;
        Logger.LogInformation("EquipmentSelector OnInitialized - OnBuy.HasDelegate: {HasDelegate}", OnBuy.HasDelegate);
    }

    protected override void OnParametersSet()
    {
        Logger.LogInformation("EquipmentSelector OnParametersSet - OnBuy.HasDelegate: {HasDelegate}", OnBuy.HasDelegate);
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        searchQuery = string.Empty;
        weaponHandFilter = "all";
        weaponTypeFilter = "all";
    }

    private void SetTabAll() => SetActiveTab("all");
    private void SetTabWeapons() => SetActiveTab("weapons");
    private void SetTabArmor() => SetActiveTab("armor");
    private void SetTabItems() => SetActiveTab("items");

    private void ClearSearch()
    {
        searchQuery = string.Empty;
    }

    private List<Equipment> GetFilteredEquipment(string tab)
    {
        var allEquipment = new List<Equipment>(Equipment);

        // Convert Weapons to Equipment
        foreach (var weapon in Weapons)
        {
            allEquipment.Add(new Equipment
            {
                Id = weapon.Id,
                Name = weapon.Name,
                Type = "weapon",
                Category = weapon.Category,
                Damage = weapon.Damage,
                Properties = weapon.Properties,
                Stat = weapon.Stat,
                Cost = weapon.Cost ?? 0,
                Slots = weapon.Slots,
                IconClass = weapon.IconClass
            });
        }

        // Convert Armors to Equipment
        foreach (var armor in Armors)
        {
            allEquipment.Add(new Equipment
            {
                Id = armor.Id,
                Name = armor.Name,
                Type = "armor",
                Cost = armor.Cost ?? 0,
                Slots = armor.Slots,
                ArmorValue = armor.ArmorValue,
                ArmorType = armor.ArmorType,
                Special = armor.Special,
                IconClass = armor.IconClass
            });
        }

        // Convert Items to Equipment
        foreach (var item in Items)
        {
            allEquipment.Add(new Equipment
            {
                Id = item.Id,
                Name = item.Name,
                Type = "item",
                Cost = item.Cost ?? 0,
                Slots = item.Slots,
                Effect = item.Effect,
                IconClass = item.IconClass
            });
        }

        return tab switch
        {
            "weapons" => allEquipment.Where(e => e.IsWeapon).OrderBy(e => e.Name).ToList(),
            "armor" => allEquipment.Where(e => e.IsArmor).OrderBy(e => e.Name).ToList(),
            "items" => allEquipment.Where(e => e.IsItem).OrderBy(e => e.Name).ToList(),
            _ => allEquipment.OrderBy(e => e.Name).ToList()
        };
    }

    private async Task HandleEquipmentClick(Equipment equipment)
    {
        if (UseCompactMode)
        {
            // In compact mode, open side panel
            selectedEquipmentForPanel = equipment;
            selectedEquipmentPrice = PriceCalculator?.Invoke(equipment);
            StateHasChanged();
        }
        else if (OnEquipmentSelected.HasDelegate)
        {
            await OnEquipmentSelected.InvokeAsync(equipment);
        }
    }

    private void CloseSidePanel()
    {
        selectedEquipmentForPanel = null;
        selectedEquipmentPrice = null;
    }

    [Inject]
    public ILogger<EquipmentSelector> Logger { get; set; } = null!;

    private async Task HandleBuy(Equipment equipment)
    {
        Logger.LogInformation("HandleBuy called for {EquipmentName}, HasDelegate: {HasDelegate}, Equipment null: {EquipmentNull}",
            equipment?.Name, OnBuy.HasDelegate, equipment == null);

        if (equipment == null)
        {
            Logger.LogWarning("Equipment is null in HandleBuy");
            return;
        }

        if (OnBuy.HasDelegate)
        {
            Logger.LogInformation("Invoking OnBuy callback with equipment: {EquipmentId}", equipment.Id);
            await OnBuy.InvokeAsync(equipment);
            Logger.LogInformation("OnBuy callback completed");
        }
        else
        {
            Logger.LogWarning("OnBuy has no delegate - callback not set from parent");
        }
    }

    private async Task HandleSell(Equipment equipment)
    {
        Logger.LogInformation("HandleSell called for {EquipmentName}, HasDelegate: {HasDelegate}", equipment?.Name, OnSell.HasDelegate);
        if (OnSell.HasDelegate)
        {
            await OnSell.InvokeAsync(equipment);
        }
    }

    private async Task HandleRemove(Equipment equipment)
    {
        if (OnRemove.HasDelegate)
        {
            await OnRemove.InvokeAsync(equipment);
        }
    }

    private async Task HandleAssign(Equipment equipment)
    {
        if (OnAssign.HasDelegate)
        {
            await OnAssign.InvokeAsync(equipment);
        }
    }

    private EventCallback<Equipment> GetBuyCallback() => OnBuy.HasDelegate ? OnBuy : default;
    private EventCallback<Equipment> GetSellCallback() => OnSell.HasDelegate ? OnSell : default;
    private EventCallback<Equipment> GetRemoveCallback() => OnRemove.HasDelegate ? OnRemove : default;
    private EventCallback<Equipment> GetAssignCallback() => OnAssign.HasDelegate ? OnAssign : default;
}
