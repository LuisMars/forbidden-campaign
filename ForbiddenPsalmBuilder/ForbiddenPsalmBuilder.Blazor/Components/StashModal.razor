@namespace ForbiddenPsalmBuilder.Components
@using ForbiddenPsalmBuilder.Core.Models.Warband
@using ForbiddenPsalmBuilder.Core.Models.Character
@using ForbiddenPsalmBuilder.Core.Models.Selection
@using ForbiddenPsalmBuilder.Core.Services
@using ForbiddenPsalmBuilder.Core.Services.State

<Modal IsVisible="@IsVisible" OnClose="@OnClose">
    <div class="stash-modal">
        <div class="modal-header">
            <div class="modal-header-content">
                <h2>Equipment Management</h2>
                <div class="warband-info">
                    <span class="warband-name">@Warband?.Name</span>
                    <span class="warband-gold">
                        <i class="fas fa-coins"></i>
                        @Warband?.Gold@GetCurrencySymbol()
                    </span>
                </div>
            </div>
            <button type="button" class="modal-close-button" @onclick="OnClose">
                <i class="fas fa-times"></i>
            </button>
        </div>

        <div class="stash-tabs">
            <button type="button"
                    class="tab-button @(activeTab == "stash" ? "active" : "")"
                    @onclick="SetTabStash">
                <i class="fas fa-box-open"></i>
                Warband Stash (@(Warband?.Stash.Count ?? 0))
            </button>
            <button type="button"
                    class="tab-button @(activeTab == "buy" ? "active" : "")"
                    @onclick="SetTabBuy">
                <i class="fas fa-shopping-cart"></i>
                Buy Equipment
            </button>
            <button type="button"
                    class="tab-button @(activeTab == "sell" ? "active" : "")"
                    @onclick="SetTabSell"
                    disabled="@(!HasStashEquipment())">
                <i class="fas fa-coins"></i>
                Sell Equipment
            </button>
        </div>

        <div class="stash-content">
            @if (activeTab == "stash")
            {
                <div class="stash-tab-content">
                    @if (HasStashEquipment())
                    {
                        <div class="stash-grid">
                            @foreach (var equipment in Warband!.Stash)
                            {
                                <EquipmentCard
                                    Equipment="equipment"
                                    ShowActions="true"
                                    OnAssign="() => ShowCharacterSelector(equipment)"
                                    OnRemove="() => RemoveFromStash(equipment.Id)" />
                            }
                        </div>
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-box-open"></i>
                            <p>Your stash is empty</p>
                            <p class="empty-state-hint">Buy equipment to add items to your stash</p>
                        </div>
                    }
                </div>
            }
            else if (activeTab == "buy")
            {
                <div class="buy-tab-content">
                    <TraderSelector
                        Traders="@availableTraders"
                        SelectedTraderId="@selectedTraderId"
                        SelectedTraderIdChanged="@OnTraderChanged"
                        Label="Select Trader"
                        AllowNone="true"
                        ShowPricingInfo="true" />

                    @if (!string.IsNullOrEmpty(selectedTraderId))
                    {
                        <EquipmentSelector
                            Weapons="@availableWeapons"
                            Armors="@availableArmors"
                            Items="@availableItems"
                            ShowTabs="true"
                            ShowSearch="true"
                            ShowPrice="true"
                            ShowActions="true"
                            PriceCalculator="@CalculateBuyPrice"
                            DisabledEquipmentIds="@GetUnaffordableEquipmentIds()"
                            OnBuy="@BuyEquipment" />
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-store"></i>
                            <p>Select a trader to browse equipment</p>
                        </div>
                    }
                </div>
            }
            else if (activeTab == "sell")
            {
                <div class="sell-tab-content">
                    <TraderSelector
                        Traders="@availableTraders"
                        SelectedTraderId="@selectedTraderId"
                        SelectedTraderIdChanged="@OnTraderChanged"
                        Label="Select Trader"
                        AllowNone="true"
                        ShowPricingInfo="true" />

                    @if (!string.IsNullOrEmpty(selectedTraderId))
                    {
                        <EquipmentSelector
                            Equipment="@Warband!.Stash"
                            ShowTabs="true"
                            ShowSearch="true"
                            ShowPrice="true"
                            ShowActions="true"
                            PriceCalculator="@CalculateSellPrice"
                            OnSell="@SellEquipment" />
                    }
                    else
                    {
                        <div class="empty-state">
                            <i class="fas fa-hand-holding-usd"></i>
                            <p>Select a trader to sell equipment</p>
                        </div>
                    }
                </div>
            }
        </div>

        @if (showCharacterSelector && equipmentToAssign != null)
        {
            <div class="character-selector-overlay">
                <div class="character-selector-modal">
                    <div class="modal-header">
                        <h3>Assign Equipment to Character</h3>
                        <button type="button" class="close-button" @onclick="CloseCharacterSelector">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                    <div class="character-list">
                        @foreach (var character in Warband!.Members)
                        {
                            var canEquip = StateService.CanCharacterEquip(Warband.Id, character.Id, equipmentToAssign);
                            <div class="character-option @(canEquip ? "" : "disabled")"
                                 @onclick="() => AssignToCharacter(character.Id)">
                                <div class="character-info">
                                    <span class="character-name">@character.Name</span>
                                    <span class="character-slots">
                                        @character.Equipment.Sum(e => e.Slots)/@character.Stats.EquipmentSlots slots
                                    </span>
                                </div>
                                @if (!canEquip)
                                {
                                    <span class="cannot-equip">Cannot equip</span>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="error-banner">
                <i class="fas fa-exclamation-triangle"></i>
                <span>@errorMessage</span>
                <button type="button" @onclick="ClearError">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>
</Modal>

@code {
    [Parameter, EditorRequired]
    public Warband? Warband { get; set; }

    [Parameter]
    public bool IsVisible { get; set; }

    [Parameter]
    public EventCallback OnClose { get; set; }

    [Parameter]
    public EventCallback OnEquipmentChanged { get; set; }

    [Inject]
    public IGameStateService StateService { get; set; } = null!;

    [Inject]
    public EquipmentService EquipmentService { get; set; } = null!;

    [Inject]
    public TraderService TraderService { get; set; } = null!;

    private string activeTab = "stash";
    private string? selectedTraderId;
    private List<Trader> availableTraders = new();
    private List<Weapon> availableWeapons = new();
    private List<Armor> availableArmors = new();
    private List<Item> availableItems = new();
    private Trader? selectedTrader;
    private bool showCharacterSelector = false;
    private Equipment? equipmentToAssign;
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        if (Warband != null && IsVisible)
        {
            await LoadData();
        }
    }

    private async Task LoadData()
    {
        if (Warband == null) return;

        // Load traders
        availableTraders = await TraderService.GetTradersAsync(Warband.GameVariant);

        // Load all equipment
        availableWeapons = await EquipmentService.GetWeaponsAsync(Warband.GameVariant);
        availableArmors = await EquipmentService.GetArmorAsync(Warband.GameVariant);
        availableItems = await EquipmentService.GetItemsAsync(Warband.GameVariant);
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        selectedTraderId = null;
        selectedTrader = null;
        ClearError();
    }

    private void SetTabStash() => SetActiveTab("stash");
    private void SetTabBuy() => SetActiveTab("buy");
    private void SetTabSell() => SetActiveTab("sell");

    private async Task OnTraderChanged(string? traderId)
    {
        selectedTraderId = traderId;
        selectedTrader = !string.IsNullOrEmpty(traderId)
            ? await TraderService.GetTraderByIdAsync(traderId, Warband!.GameVariant)
            : null;
        ClearError();
    }

    private bool HasStashEquipment()
    {
        return Warband?.Stash.Any() ?? false;
    }

    private string GetCurrencySymbol()
    {
        if (Warband == null) return "G";
        var gameConfig = StateService.State.GameConfigs.GetValueOrDefault(Warband.GameVariant);
        return gameConfig?.Currency?.Symbol ?? "G";
    }

    private int? CalculateBuyPrice(Equipment equipment)
    {
        if (selectedTrader == null) return equipment.Cost;
        return selectedTrader.CalculateBuyPrice(equipment.Cost);
    }

    private int? CalculateSellPrice(Equipment equipment)
    {
        if (selectedTrader == null) return equipment.Cost;
        return selectedTrader.CalculateSellPrice(equipment.Cost);
    }

    private List<string> GetUnaffordableEquipmentIds()
    {
        if (Warband == null || selectedTrader == null) return new();

        var unaffordable = new List<string>();

        foreach (var weapon in availableWeapons)
        {
            if (weapon.Cost.HasValue)
            {
                var price = selectedTrader.CalculateBuyPrice(weapon.Cost.Value);
                if (!Warband.CanAfford(price))
                {
                    unaffordable.Add(weapon.Id);
                }
            }
        }

        foreach (var armor in availableArmors)
        {
            if (armor.Cost.HasValue)
            {
                var price = selectedTrader.CalculateBuyPrice(armor.Cost.Value);
                if (!Warband.CanAfford(price))
                {
                    unaffordable.Add(armor.Id);
                }
            }
        }

        foreach (var item in availableItems)
        {
            if (item.Cost.HasValue)
            {
                var price = selectedTrader.CalculateBuyPrice(item.Cost.Value);
                if (!Warband.CanAfford(price))
                {
                    unaffordable.Add(item.Id);
                }
            }
        }

        return unaffordable;
    }

    private async Task BuyEquipment(Equipment equipment)
    {
        if (Warband == null || string.IsNullOrEmpty(selectedTraderId)) return;

        try
        {
            await StateService.BuyEquipmentAsync(Warband.Id, equipment.Id, equipment.Type, selectedTraderId);
            await NotifyEquipmentChanged();
            ClearError();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task SellEquipment(Equipment equipment)
    {
        if (Warband == null || string.IsNullOrEmpty(selectedTraderId)) return;

        try
        {
            await StateService.SellEquipmentAsync(Warband.Id, equipment.Id, selectedTraderId);
            await NotifyEquipmentChanged();
            ClearError();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private void ShowCharacterSelector(Equipment equipment)
    {
        equipmentToAssign = equipment;
        showCharacterSelector = true;
    }

    private void CloseCharacterSelector()
    {
        showCharacterSelector = false;
        equipmentToAssign = null;
    }

    private async Task AssignToCharacter(string characterId)
    {
        if (Warband == null || equipmentToAssign == null) return;

        try
        {
            await StateService.TransferEquipmentToCharacterAsync(Warband.Id, characterId, equipmentToAssign.Id);
            await NotifyEquipmentChanged();
            CloseCharacterSelector();
            ClearError();
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            CloseCharacterSelector();
        }
    }

    private async Task RemoveFromStash(string equipmentId)
    {
        if (Warband == null) return;

        try
        {
            // Find and remove equipment from stash
            var equipment = Warband.Stash.FirstOrDefault(e => e.Id == equipmentId);
            if (equipment != null)
            {
                Warband.Stash.Remove(equipment);
                await StateService.UpdateWarbandAsync(Warband);
                await NotifyEquipmentChanged();
                ClearError();
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task NotifyEquipmentChanged()
    {
        if (OnEquipmentChanged.HasDelegate)
        {
            await OnEquipmentChanged.InvokeAsync();
        }
    }

    private void ClearError()
    {
        errorMessage = null;
    }
}
