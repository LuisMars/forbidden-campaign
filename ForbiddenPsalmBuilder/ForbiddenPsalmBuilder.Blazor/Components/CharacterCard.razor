@namespace ForbiddenPsalmBuilder.Blazor.Components
@using ForbiddenPsalmBuilder.Core.Models.Character
@using ForbiddenPsalmBuilder.Components
@using static ForbiddenPsalmBuilder.Components.StatsDisplay

<article class="character-card @(PrintMode ? "print-mode" : "")">
    <div class="horizontal space">
        @if (PrintMode)
        {
            <h3>
                @if (!string.IsNullOrEmpty(SpecialClassIcon))
                {
                    <i class="@SpecialClassIcon character-special-icon"></i>
                }
                @Character.Name
            </h3>
        }
        else
        {
            <h3 class="clickable-name" @onclick="OnEdit">
                @if (!string.IsNullOrEmpty(SpecialClassIcon))
                {
                    <i class="@SpecialClassIcon character-special-icon"></i>
                }
                @Character.Name
            </h3>
            <div class="card-actions">
                <button @onclick="OnEdit" class="button-edit" title="Edit character">
                    <i class="fas fa-edit"></i>
                </button>
                <button @onclick="ShowDeleteConfirm" class="button-delete" title="Delete character">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        }
    </div>

    <div class="character-stats-wrapper">
        <StatsDisplay Stats="@MainStats" />
        <StatsDisplay Stats="@CalculatedStats" />
        <div class="print-only-stats">
            <StatsDisplay Stats="@SlotsStats" />
        </div>
    </div>

    @if (Character.Equipment.Any())
    {
        <hr />
        <small>Equipment (@UsedSlots/@Character.Stats.EquipmentSlots slots):</small>
        <div class="character-equipment-grid">
            @foreach (var equipment in Character.Equipment)
            {
                <EquipmentCard
                    Equipment="equipment"
                    CompactMode="false"
                    ShowActions="@(!PrintMode && (OnEquipmentRemove.HasDelegate || OnEquipmentSell.HasDelegate))"
                    ShowPrice="false"
                    OnRemove="OnEquipmentRemove"
                    OnSell="OnEquipmentSell" />
            }
        </div>
    }

    @if (Character.Injuries.Any())
    {
        <hr />
        <small>Injuries:</small>
        <div class="character-injuries">
            @foreach (var injury in Character.Injuries)
            {
                <span class="injury-item">@injury</span>
            }
        </div>
    }

    @if (!string.IsNullOrEmpty(Character.SpecialClassId))
    {
        <div class="character-tags">
            <span class="tag">@Character.SpecialClassId</span>
        </div>
    }

    @if (!PrintMode)
    {
        <ConfirmDialog
            IsVisible="@showDeleteConfirm"
            Title="Delete Character"
            Message="@($"Are you sure you want to delete {Character.Name}? This action cannot be undone.")"
            ConfirmText="Delete"
            OnConfirm="HandleDeleteConfirm"
            OnCancel="CancelDelete" />
    }
</article>

@code {
    [Parameter, EditorRequired]
    public Character Character { get; set; } = null!;

    [Parameter]
    public string? SpecialClassIcon { get; set; }

    [Parameter]
    public bool PrintMode { get; set; } = false;

    [Parameter]
    public EventCallback OnEdit { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnEquipmentRemove { get; set; }

    [Parameter]
    public EventCallback<Equipment> OnEquipmentSell { get; set; }

    private bool showDeleteConfirm = false;

    private int UsedSlots => Character.Equipment.Sum(e => e.Slots);

    private void ShowDeleteConfirm()
    {
        showDeleteConfirm = true;
    }

    private async Task HandleDeleteConfirm()
    {
        showDeleteConfirm = false;
        if (OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync();
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
    }

    private List<StatItem> MainStats => new()
    {
        new StatItem { Value = Character.Stats.Agility.ToString(), Label = "AGI" },
        new StatItem { Value = Character.Stats.Presence.ToString(), Label = "PRE" },
        new StatItem { Value = Character.Stats.Strength.ToString(), Label = "STR" },
        new StatItem { Value = Character.Stats.Toughness.ToString(), Label = "TGH" }
    };

    private List<StatItem> CalculatedStats => new()
    {
        new StatItem { Value = Character.Stats.HP.ToString(), Label = "HP" },
        new StatItem { Value = TotalArmorValue.ToString(), Label = "AV" },
        new StatItem { Value = Character.Stats.Movement.ToString(), Label = "MOV" }
    };

    private List<StatItem> SlotsStats => new()
    {
        new StatItem { Value = $"{UsedSlots}/{Character.Stats.EquipmentSlots}", Label = "SLOTS" }
    };

    private int TotalArmorValue => Character.Equipment.Where(e => e.IsArmor).Sum(e => e.ArmorValue);
}