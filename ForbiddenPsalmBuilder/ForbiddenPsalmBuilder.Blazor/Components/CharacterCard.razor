@namespace ForbiddenPsalmBuilder.Blazor.Components
@using ForbiddenPsalmBuilder.Core.Models.Character
@using ForbiddenPsalmBuilder.Components
@using static ForbiddenPsalmBuilder.Components.StatsDisplay

<article class="character-card @(PrintMode ? "print-mode" : "")">
    <div class="horizontal space">
        @if (PrintMode)
        {
            <h3>
                @if (!string.IsNullOrEmpty(SpecialClassIcon))
                {
                    <i class="@SpecialClassIcon character-special-icon"></i>
                }
                @Character.Name
            </h3>
        }
        else
        {
            <h3 class="clickable-name" @onclick="OnEdit">
                @if (!string.IsNullOrEmpty(SpecialClassIcon))
                {
                    <i class="@SpecialClassIcon character-special-icon"></i>
                }
                @Character.Name
            </h3>
            <div class="card-actions">
                <button @onclick="OnEdit" class="button-edit" title="Edit character">
                    <i class="fas fa-edit"></i>
                </button>
                <button @onclick="ShowDeleteConfirm" class="button-delete" title="Delete character">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        }
    </div>

    <StatsDisplay Stats="@MainStats" />
    <StatsDisplay Stats="@CalculatedStats" />

    @if (!string.IsNullOrEmpty(Character.SpecialClassId))
    {
        <div class="character-tags">
            <span class="tag">@Character.SpecialClassId</span>
        </div>
    }

    @if (Character.Equipment.Any())
    {
        <hr />
        <small>Equipment (@UsedSlots/@Character.Stats.EquipmentSlots slots):</small>
        <div class="character-equipment">
            @foreach (var equipment in Character.Equipment)
            {
                <span class="equipment-item" title="@GetEquipmentTooltip(equipment)">
                    @if (!string.IsNullOrEmpty(equipment.Damage))
                    {
                        <i class="ra ra-crossed-swords"></i>
                    }
                    else if (equipment.IsArmor)
                    {
                        <i class="ra ra-shield"></i>
                    }
                    else
                    {
                        <i class="fas fa-box"></i>
                    }
                    @equipment.Name
                </span>
            }
        </div>
    }

    @if (Character.Injuries.Any())
    {
        <hr />
        <small>Injuries:</small>
        <div class="character-injuries">
            @foreach (var injury in Character.Injuries)
            {
                <span class="injury-item">@injury</span>
            }
        </div>
    }

    @if (!PrintMode)
    {
        <ConfirmDialog
            IsVisible="@showDeleteConfirm"
            Title="Delete Character"
            Message="@($"Are you sure you want to delete {Character.Name}? This action cannot be undone.")"
            ConfirmText="Delete"
            OnConfirm="HandleDeleteConfirm"
            OnCancel="CancelDelete" />
    }
</article>

@code {
    [Parameter, EditorRequired]
    public Character Character { get; set; } = null!;

    [Parameter]
    public string? SpecialClassIcon { get; set; }

    [Parameter]
    public bool PrintMode { get; set; } = false;

    [Parameter]
    public EventCallback OnEdit { get; set; }

    [Parameter]
    public EventCallback OnDelete { get; set; }

    private bool showDeleteConfirm = false;

    private int UsedSlots => Character.Equipment.Sum(e => e.Slots);

    private void ShowDeleteConfirm()
    {
        showDeleteConfirm = true;
    }

    private async Task HandleDeleteConfirm()
    {
        showDeleteConfirm = false;
        if (OnDelete.HasDelegate)
        {
            await OnDelete.InvokeAsync();
        }
    }

    private void CancelDelete()
    {
        showDeleteConfirm = false;
    }

    private List<StatItem> MainStats => new()
    {
        new StatItem { Value = Character.Stats.Agility.ToString(), Label = "AGI" },
        new StatItem { Value = Character.Stats.Presence.ToString(), Label = "PRE" },
        new StatItem { Value = Character.Stats.Strength.ToString(), Label = "STR" },
        new StatItem { Value = Character.Stats.Toughness.ToString(), Label = "TGH" }
    };

    private List<StatItem> CalculatedStats => new()
    {
        new StatItem { Value = Character.Stats.HP.ToString(), Label = "HP" },
        new StatItem { Value = TotalArmorValue.ToString(), Label = "ARMOR" },
        new StatItem { Value = Character.Stats.Movement.ToString(), Label = "MOV" },
        new StatItem { Value = $"{UsedSlots}/{Character.Stats.EquipmentSlots}", Label = "SLOTS" }
    };

    private int TotalArmorValue => Character.Equipment.Where(e => e.IsArmor).Sum(e => e.ArmorValue);

    private string GetEquipmentTooltip(Equipment equipment)
    {
        var parts = new List<string> { equipment.Name };

        if (!string.IsNullOrEmpty(equipment.Damage))
            parts.Add($"Damage: {equipment.Damage}");

        if (equipment.ArmorValue > 0)
            parts.Add($"Armor: {equipment.ArmorValue}");

        if (equipment.Slots > 0)
            parts.Add($"Slots: {equipment.Slots}");

        if (!string.IsNullOrEmpty(equipment.Special))
            parts.Add($"Special: {equipment.Special}");

        return string.Join(" | ", parts);
    }
}