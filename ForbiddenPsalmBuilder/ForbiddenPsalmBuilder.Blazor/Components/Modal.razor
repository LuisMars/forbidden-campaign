@if (IsVisible)
{
    <div class="modal">
        <dialog open class="modal-dialog">
            @if (!string.IsNullOrEmpty(Title))
            {
                <header class="horizontal space">
                    <h3>@Title</h3>
                    @if (ShowCloseButton)
                    {
                        <button type="button" class="close-button" @onclick="Close">
                            <i class="fas fa-times"></i>
                        </button>
                    }
                </header>
            }

            @ChildContent
        </dialog>
    </div>
}

@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private bool _previousIsVisible = false;
    private bool _modalOpenAdded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_previousIsVisible != IsVisible)
        {
            if (IsVisible)
            {
                await JSRuntime.InvokeVoidAsync("document.body.classList.add", "modal-open");
                _modalOpenAdded = true;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("document.body.classList.remove", "modal-open");
                _modalOpenAdded = false;
            }
            _previousIsVisible = IsVisible;
        }
    }

    private async Task Close()
    {
        await OnClose.InvokeAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (_modalOpenAdded)
        {
            try
            {
                await JSRuntime.InvokeVoidAsync("document.body.classList.remove", "modal-open");
            }
            catch
            {
                // Ignore errors during disposal
            }
        }
    }
}