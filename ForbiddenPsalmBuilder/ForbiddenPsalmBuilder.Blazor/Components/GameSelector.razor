@using ForbiddenPsalmBuilder.Core.Services.State
@inject IGameStateService StateService
@implements IDisposable

<section>
    <header>
        <h5>Game Selection</h5>
    </header>

    <fieldset>
        <label for="gameVariant">Choose Game Variant:</label>
        <select id="gameVariant" value="@StateService.State.SelectedGameVariant"
                @onchange="OnGameVariantChanged">
            <option value="28-psalms">28 Psalms</option>
            <option value="end-times">Forbidden Psalm: End Times</option>
            <option value="last-war">The Last War</option>
        </select>
    </fieldset>

    <small>Current game: <strong>@StateService.State.SelectedGameVariant</strong></small>

    @if (StateService.State.IsLoading)
    {
        <p>Loading...</p>
    }

    @if (!string.IsNullOrEmpty(StateService.State.ErrorMessage))
    {
        <aside role="alert">
            @StateService.State.ErrorMessage
            <button type="button" class="close-button" @onclick="ClearError">
                <i class="fas fa-times"></i>
            </button>
        </aside>
    }
</section>

@code {
    protected override void OnInitialized()
    {
        StateService.StateChanged += OnStateChanged;
        StateService.GameVariantChanged += OnGameVariantChangedEvent;
    }

    private async Task OnGameVariantChanged(ChangeEventArgs e)
    {
        if (e.Value?.ToString() is string variant)
        {
            try
            {
                await StateService.SetGameVariantAsync(variant);
            }
            catch (Exception ex)
            {
                await StateService.SetErrorAsync($"Failed to change game variant: {ex.Message}");
            }
        }
    }

    private void OnStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void OnGameVariantChangedEvent(string variant)
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task ClearError()
    {
        await StateService.ClearErrorAsync();
    }

    public void Dispose()
    {
        StateService.StateChanged -= OnStateChanged;
        StateService.GameVariantChanged -= OnGameVariantChangedEvent;
    }
}